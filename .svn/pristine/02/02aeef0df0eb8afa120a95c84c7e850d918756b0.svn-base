"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupNode = exports.Group = void 0;
var GroupNode_1 = require("./GroupNode");
exports.GroupNode = GroupNode_1.default;
var Group = /** @class */ (function () {
    function Group(_a) {
        var _this = this;
        var lf = _a.lf;
        this.nodeGroupMap = new Map();
        this.graphRendered = function (data) {
            // 如果节点
            if (data && data.nodes) {
                data.nodes.forEach(function (node) {
                    if (node.children) {
                        node.children.forEach(function (nodeId) {
                            _this.nodeGroupMap.set(nodeId, node.id);
                        });
                    }
                });
            }
        };
        this.appendNodeToGroup = function (_a) {
            var data = _a.data;
            // 如果这个节点之前已经在group中了，则将其从之前的group中移除
            var preGroupId = _this.nodeGroupMap.get(data.id);
            if (preGroupId) {
                var preGroup = _this.lf.getNodeModelById(preGroupId);
                preGroup.removeChild(data.id);
                _this.nodeGroupMap.delete(data.id);
                preGroup.setAllowAppendChild(false);
            }
            // 然后再判断这个节点是否在某个group中，如果在，则将其添加到对应的group中
            var bounds = _this.lf.getNodeModelById(data.id).getBounds();
            var group = _this.getGroup(bounds);
            if (!group)
                return;
            var isAllowAppendIn = group.isAllowAppendIn(data);
            if (!isAllowAppendIn) {
                _this.lf.emit('group:not-allowed', {
                    group: group.getData(),
                    node: data,
                });
                return;
            }
            if (data.id !== group.id) {
                group.addChild(data.id);
                _this.nodeGroupMap.set(data.id, group.id);
                group.setAllowAppendChild(false);
            }
            else if (data.children && data.children.length > 0) {
                // 表示当前添加的节点是一个新增的group
                data.children.forEach(function (nodeId) {
                    _this.nodeGroupMap.set(nodeId, data.id);
                });
            }
        };
        this.deleteGroupChild = function (_a) {
            var data = _a.data;
            var groupId = _this.nodeGroupMap.get(data.id);
            if (groupId) {
                var group = _this.lf.getNodeModelById(groupId);
                group.removeChild(data.id);
                _this.nodeGroupMap.delete(data.id);
            }
        };
        this.setActiveGroup = function (_a) {
            var data = _a.data;
            var nodeModel = _this.lf.getNodeModelById(data.id);
            var bounds = nodeModel.getBounds();
            var newGroup = _this.getGroup(bounds);
            if (_this.activeGroup) {
                _this.activeGroup.setAllowAppendChild(false);
            }
            if (!newGroup || (nodeModel.isGroup && newGroup.id === data.id))
                return;
            var isAllowAppendIn = newGroup.isAllowAppendIn(data);
            if (!isAllowAppendIn) {
                return;
            }
            _this.activeGroup = newGroup;
            _this.activeGroup.setAllowAppendChild(true);
        };
        lf.register(GroupNode_1.default);
        this.lf = lf;
        lf.graphModel.addNodeMoveRules(function (model, deltaX, deltaY) {
            if (model.isGroup) { // 如果移动的是分组，那么分组的子节点也跟着移动。
                var nodeIds = _this.getNodeAllChild(model);
                lf.graphModel.moveNodes(nodeIds, deltaX, deltaY, true);
                return true;
            }
            var groupModel = lf.getNodeModelById(_this.nodeGroupMap.get(model.id));
            if (groupModel && groupModel.isRestrict) { // 如果移动的节点存在分组中，且这个分组禁止子节点移出去。
                var _a = model.getBounds(), x1 = _a.x1, y1 = _a.y1, x2 = _a.x2, y2 = _a.y2;
                var r = groupModel.isAllowMoveTo({
                    x1: x1 + deltaX,
                    y1: y1 + deltaY,
                    x2: x2 + deltaX,
                    y2: y2 + deltaY,
                });
                return r;
            }
            return true;
        });
        lf.graphModel.group = this;
        lf.on('node:add', this.appendNodeToGroup);
        lf.on('node:delete', this.deleteGroupChild);
        lf.on('node:drop', this.appendNodeToGroup);
        lf.on('node:dnd-drag', this.setActiveGroup);
        lf.on('node:drag', this.setActiveGroup);
        lf.on('graph:rendered', this.graphRendered);
    }
    /**
     * 获取一个节点内部所有的子节点，包裹分组的子节点
     */
    Group.prototype.getNodeAllChild = function (model) {
        var _this = this;
        var nodeIds = [];
        if (model.children) {
            model.children.forEach(function (nodeId) {
                nodeIds.push(nodeId);
                var nodeModel = _this.lf.getNodeModelById(nodeId);
                if (nodeModel.isGroup) {
                    nodeIds = nodeIds.concat(_this.getNodeAllChild(nodeModel));
                }
            });
        }
        return nodeIds;
    };
    /**
     * 获取自定位置其所属分组
     */
    Group.prototype.getGroup = function (bounds) {
        var nodes = this.lf.graphModel.nodes;
        for (var i = 0; i < nodes.length; i++) {
            var model = nodes[i];
            if (model.isGroup && model.isInRange(bounds)) {
                return model;
            }
        }
    };
    /**
     * 获取某个节点所属的groupModel
     */
    Group.prototype.getNodeGroup = function (nodeId) {
        var groupId = this.nodeGroupMap.get(nodeId);
        if (groupId) {
            return this.lf.getNodeModelById(groupId);
        }
    };
    Group.pluginName = 'group';
    return Group;
}());
exports.Group = Group;
