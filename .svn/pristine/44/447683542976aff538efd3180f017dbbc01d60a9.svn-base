{
  "version": 3,
  "sources": ["../../../src/hooks/system/useMethods.ts"],
  "sourcesContent": ["import { defHttp } from '/@/utils/http/axios';\nimport { useMessage } from '/@/hooks/web/useMessage';\nimport { useGlobSetting } from '/@/hooks/setting';\n\nconst { createMessage, createWarningModal } = useMessage();\nconst glob = useGlobSetting();\n\n/**\n * \u5BFC\u51FA\u6587\u4EF6xlsx\u7684mime-type\n */\nexport const XLSX_MIME_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';\n/**\n * \u5BFC\u51FA\u6587\u4EF6xlsx\u7684\u6587\u4EF6\u540E\u7F00\n */\nexport const XLSX_FILE_SUFFIX = '.xlsx';\n\nexport function useMethods() {\n  /**\n   * \u5BFC\u51FAxls\n   * @param name\n   * @param url\n   */\n  async function exportXls(name, url, params, isXlsx = false) {\n    const data = await defHttp.get({ url: url, params: params, responseType: 'blob' }, { isTransformResponse: false });\n    if (!data) {\n      createMessage.warning('\u6587\u4EF6\u4E0B\u8F7D\u5931\u8D25');\n      return;\n    }\n    if (!name || typeof name != 'string') {\n      name = '\u5BFC\u51FA\u6587\u4EF6';\n    }\n    let blobOptions = { type: 'application/vnd.ms-excel' };\n    let fileSuffix = '.xls';\n    if (isXlsx === true) {\n      blobOptions['type'] = XLSX_MIME_TYPE;\n      fileSuffix = XLSX_FILE_SUFFIX;\n    }\n    if (typeof window.navigator.msSaveBlob !== 'undefined') {\n      window.navigator.msSaveBlob(new Blob([data], blobOptions), name + fileSuffix);\n    } else {\n      let url = window.URL.createObjectURL(new Blob([data], blobOptions));\n      let link = document.createElement('a');\n      link.style.display = 'none';\n      link.href = url;\n      link.setAttribute('download', name + fileSuffix);\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link); //\u4E0B\u8F7D\u5B8C\u6210\u79FB\u9664\u5143\u7D20\n      window.URL.revokeObjectURL(url); //\u91CA\u653E\u6389blob\u5BF9\u8C61\n    }\n  }\n\n  /**\n   * \u5BFC\u5165xls\n   * @param data \u5BFC\u5165\u7684\u6570\u636E\n   * @param url\n   * @param success \u6210\u529F\u540E\u7684\u56DE\u8C03\n   */\n  async function importXls(data, url, success) {\n    const isReturn = (fileInfo) => {\n      try {\n        if (fileInfo.code === 201) {\n          let {\n            message,\n            result: { msg, fileUrl, fileName },\n          } = fileInfo;\n          let href = glob.uploadUrl + fileUrl;\n          createWarningModal({\n            title: message,\n            centered: false,\n            content: `<div>\n                                <span>${msg}</span><br/> \n                                <span>\u5177\u4F53\u8BE6\u60C5\u8BF7<a href = ${href} download = ${fileName}> \u70B9\u51FB\u4E0B\u8F7D </a> </span> \n                              </div>`,\n          });\n        } else if (fileInfo.code === 500) {\n          createMessage.error(fileInfo.message || `${data.file.name} \u5BFC\u5165\u5931\u8D25`);\n        } else {\n          createMessage.success(fileInfo.message || `${data.file.name} \u6587\u4EF6\u4E0A\u4F20\u6210\u529F`);\n        }\n      } catch (error) {\n        console.log('\u5BFC\u5165\u7684\u6570\u636E\u5F02\u5E38', error);\n      } finally {\n        typeof success === 'function' ? success(fileInfo) : '';\n      }\n    };\n    await defHttp.uploadFile({ url }, { file: data.file }, { success: isReturn });\n  }\n\n  return {\n    handleExportXls: (name: string, url: string, params?: object) => exportXls(name, url, params),\n    handleImportXls: (data, url, success) => importXls(data, url, success),\n    handleExportXlsx: (name: string, url: string, params?: object) => exportXls(name, url, params, true),\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAIA,IAAM,EAAE,eAAe,mBAAmB,IAAI,WAAW;AACzD,IAAM,OAAO,eAAe;AAKrB,IAAM,iBAAiB;AAIvB,IAAM,mBAAmB;AAEzB,SAAS,aAAa;AAM3B,iBAAe,UAAU,MAAM,KAAK,QAAQ,SAAS,OAAO;AAC1D,UAAM,OAAO,MAAM,QAAQ,IAAI,EAAE,KAAU,QAAgB,cAAc,OAAO,GAAG,EAAE,qBAAqB,MAAM,CAAC;AACjH,QAAI,CAAC,MAAM;AACT,oBAAc,QAAQ,sCAAQ;AAC9B;AAAA,IACF;AACA,QAAI,CAAC,QAAQ,OAAO,QAAQ,UAAU;AACpC,aAAO;AAAA,IACT;AACA,QAAI,cAAc,EAAE,MAAM,2BAA2B;AACrD,QAAI,aAAa;AACjB,QAAI,WAAW,MAAM;AACnB,kBAAY,UAAU;AACtB,mBAAa;AAAA,IACf;AACA,QAAI,OAAO,OAAO,UAAU,eAAe,aAAa;AACtD,aAAO,UAAU,WAAW,IAAI,KAAK,CAAC,IAAI,GAAG,WAAW,GAAG,OAAO,UAAU;AAAA,IAC9E,OAAO;AACL,UAAIA,OAAM,OAAO,IAAI,gBAAgB,IAAI,KAAK,CAAC,IAAI,GAAG,WAAW,CAAC;AAClE,UAAI,OAAO,SAAS,cAAc,GAAG;AACrC,WAAK,MAAM,UAAU;AACrB,WAAK,OAAOA;AACZ,WAAK,aAAa,YAAY,OAAO,UAAU;AAC/C,eAAS,KAAK,YAAY,IAAI;AAC9B,WAAK,MAAM;AACX,eAAS,KAAK,YAAY,IAAI;AAC9B,aAAO,IAAI,gBAAgBA,IAAG;AAAA,IAChC;AAAA,EACF;AAQA,iBAAe,UAAU,MAAM,KAAK,SAAS;AAC3C,UAAM,WAAW,CAAC,aAAa;AAC7B,UAAI;AACF,YAAI,SAAS,SAAS,KAAK;AACzB,cAAI;AAAA,YACF;AAAA,YACA,QAAQ,EAAE,KAAK,SAAS,SAAS;AAAA,UACnC,IAAI;AACJ,cAAI,OAAO,KAAK,YAAY;AAC5B,6BAAmB;AAAA,YACjB,OAAO;AAAA,YACP,UAAU;AAAA,YACV,SAAS;AAAA,wCACmB;AAAA,gFACe,mBAAmB;AAAA;AAAA,UAEhE,CAAC;AAAA,QACH,WAAW,SAAS,SAAS,KAAK;AAChC,wBAAc,MAAM,SAAS,WAAW,GAAG,KAAK,KAAK,+BAAW;AAAA,QAClE,OAAO;AACL,wBAAc,QAAQ,SAAS,WAAW,GAAG,KAAK,KAAK,2CAAa;AAAA,QACtE;AAAA,MACF,SAAS,OAAP;AACA,gBAAQ,IAAI,8CAAW,KAAK;AAAA,MAC9B,UAAE;AACA,eAAO,YAAY,aAAa,QAAQ,QAAQ,IAAI;AAAA,MACtD;AAAA,IACF;AACA,UAAM,QAAQ,WAAW,EAAE,IAAI,GAAG,EAAE,MAAM,KAAK,KAAK,GAAG,EAAE,SAAS,SAAS,CAAC;AAAA,EAC9E;AAEA,SAAO;AAAA,IACL,iBAAiB,CAAC,MAAc,KAAa,WAAoB,UAAU,MAAM,KAAK,MAAM;AAAA,IAC5F,iBAAiB,CAAC,MAAM,KAAK,YAAY,UAAU,MAAM,KAAK,OAAO;AAAA,IACrE,kBAAkB,CAAC,MAAc,KAAa,WAAoB,UAAU,MAAM,KAAK,QAAQ,IAAI;AAAA,EACrG;AACF;",
  "names": ["url"]
}
