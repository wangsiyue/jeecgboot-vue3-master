import {
  authFieldLoadTree,
  loadRoleAuthChecked,
  saveAuthField
} from "./chunk-TQDSPZNV.js";
import {
  _export_sfc
} from "./chunk-CITY6UHW.js";
import {
  useMessage
} from "./chunk-C4IBJHIP.js";
import {
  Fragment,
  computed,
  createBaseVNode,
  createBlock,
  createElementBlock,
  createTextVNode,
  createVNode,
  defineComponent,
  openBlock,
  ref,
  resolveComponent,
  unref,
  watch,
  withCtx
} from "./chunk-JQQZ4WSS.js";
import {
  init_define_APP_INFO
} from "./chunk-ET6QIZHT.js";

// node_modules/@jeecg/online/AuthFieldTree.js
init_define_APP_INFO();
import "E:/workspace/projects/dev/jeecgboot-vue3-master/src/components/jeecg/OnLine/JPopupOnlReport.vue";
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var _sfc_main = defineComponent({
  name: "AuthFieldTree",
  props: {
    cgformId: { type: String, required: true }
  },
  setup(props) {
    const { createMessage: $message } = useMessage();
    const roleId = ref("");
    const authType = ref(1);
    const autoExpandParent = ref(true);
    const expandedKeys = ref([]);
    const checkedKeys = ref([]);
    const allCode = ref([]);
    const treeData = ref([]);
    const authMode = ref("");
    const disabled = computed(() => !roleId.value);
    watch(() => props.cgformId, loadTree, { immediate: true });
    function loadTree() {
      return __async(this, null, function* () {
        if (!props.cgformId)
          return;
        let result = yield authFieldLoadTree(props.cgformId, authType.value);
        let trees = [];
        let codes = [];
        result.forEach((item) => {
          if (!codes.includes(item.code)) {
            codes.push(item.code);
            trees.push({ key: item.code, title: item.title });
          }
        });
        for (let node of trees) {
          let children = [];
          for (let item of result) {
            if (node.key === item.code) {
              let temp = getTreeNodeTitle(item);
              children.push({ key: item.id, title: temp });
            }
          }
          node.children = children;
        }
        treeData.value = trees;
        expandedKeys.value = [...codes];
        allCode.value = codes;
      });
    }
    function getTreeNodeTitle(item) {
      let str = "";
      if (item.page == 3) {
        str += "\u5217\u8868";
      } else if (item.page == 5) {
        str += "\u8868\u5355";
      }
      if (item.control == 3) {
        str += "\u53EF\u7F16\u8F91";
      } else if (item.control == 5) {
        str += "\u53EF\u89C1";
      }
      return str;
    }
    function loadChecked($roleId, $authMode) {
      return __async(this, null, function* () {
        roleId.value = $roleId;
        authMode.value = $authMode;
        checkedKeys.value = [];
        let result = yield loadRoleAuthChecked({
          roleId: $roleId,
          cgformId: props.cgformId,
          type: authType.value,
          authMode: $authMode
        });
        checkedKeys.value = result.map((item) => item.authId);
      });
    }
    function clearChecked() {
      roleId.value = "";
    }
    function onRefresh() {
      loadTree();
      loadChecked(roleId.value, authMode.value);
    }
    function onSave() {
      return __async(this, null, function* () {
        let ids = checkedKeys.value.filter((i) => allCode.value.indexOf(i) < 0);
        yield saveAuthField(roleId.value, props.cgformId, {
          authId: JSON.stringify(ids),
          authMode: authMode.value
        });
        $message.success("\u4FDD\u5B58\u6210\u529F");
      });
    }
    function onExpandAll() {
      expandedKeys.value = [...allCode.value];
    }
    function onCloseAll() {
      expandedKeys.value = [];
    }
    function onExpand($expandedKeys) {
      expandedKeys.value = $expandedKeys;
      autoExpandParent.value = false;
    }
    function clear() {
      roleId.value = "";
      checkedKeys.value = [];
    }
    function onClearSelected() {
      checkedKeys.value = [];
    }
    function onSelectAll() {
      const selectFun = function(arr) {
        for (let node of arr) {
          checkedKeys.value.push(node.key);
          if (node.children && node.children.length > 0) {
            selectFun.call(null, node.children);
          }
        }
      };
      checkedKeys.value = [];
      selectFun.call(null, unref(treeData));
    }
    return {
      loadChecked,
      clear,
      expandedKeys,
      autoExpandParent,
      checkedKeys,
      treeData,
      disabled,
      onSave,
      onExpand,
      clearChecked,
      onCloseAll,
      onExpandAll,
      onRefresh,
      onClearSelected,
      onSelectAll
    };
  }
});
var _hoisted_1 = { class: "onl-auth-tree-btns" };
var _hoisted_2 = createTextVNode("\u5237\u65B0");
var _hoisted_3 = createTextVNode("\u5C55\u5F00");
var _hoisted_4 = createTextVNode("\u6298\u53E0");
var _hoisted_5 = createTextVNode("\u4FDD\u5B58");
var _hoisted_6 = createTextVNode("\u5168\u9009");
var _hoisted_7 = createTextVNode("\u91CD\u7F6E");
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_a_empty = resolveComponent("a-empty");
  const _component_a_button = resolveComponent("a-button");
  const _component_a_tree = resolveComponent("a-tree");
  return openBlock(), createElementBlock("div", null, [
    _ctx.disabled ? (openBlock(), createBlock(_component_a_empty, {
      key: 0,
      description: "\u8BF7\u5148\u9009\u4E2D\u5DE6\u4FA7\u89D2\u8272/\u90E8\u95E8/\u7528\u6237"
    })) : _ctx.treeData.length === 0 ? (openBlock(), createBlock(_component_a_empty, {
      key: 1,
      description: "\u65E0\u6743\u9650\u4FE1\u606F"
    })) : (openBlock(), createElementBlock(Fragment, { key: 2 }, [
      createBaseVNode("div", _hoisted_1, [
        createVNode(_component_a_button, {
          onClick: _ctx.onRefresh,
          size: "small",
          type: "primary",
          preIcon: "ant-design:redo",
          ghost: ""
        }, {
          default: withCtx(() => [
            _hoisted_2
          ]),
          _: 1
        }, 8, ["onClick"]),
        createVNode(_component_a_button, {
          onClick: _ctx.onExpandAll,
          size: "small",
          type: "primary",
          preIcon: "ant-design:down-circle",
          ghost: ""
        }, {
          default: withCtx(() => [
            _hoisted_3
          ]),
          _: 1
        }, 8, ["onClick"]),
        createVNode(_component_a_button, {
          onClick: _ctx.onCloseAll,
          size: "small",
          type: "primary",
          preIcon: "ant-design:up-circle",
          ghost: ""
        }, {
          default: withCtx(() => [
            _hoisted_4
          ]),
          _: 1
        }, 8, ["onClick"]),
        createVNode(_component_a_button, {
          onClick: _ctx.onSave,
          size: "small",
          type: "primary",
          preIcon: "ant-design:save",
          ghost: ""
        }, {
          default: withCtx(() => [
            _hoisted_5
          ]),
          _: 1
        }, 8, ["onClick"]),
        createVNode(_component_a_button, {
          onClick: _ctx.onSelectAll,
          size: "small",
          type: "primary",
          preIcon: "ant-design:check",
          ghost: ""
        }, {
          default: withCtx(() => [
            _hoisted_6
          ]),
          _: 1
        }, 8, ["onClick"]),
        createVNode(_component_a_button, {
          onClick: _ctx.onClearSelected,
          size: "small",
          type: "primary",
          preIcon: "ant-design:undo",
          ghost: ""
        }, {
          default: withCtx(() => [
            _hoisted_7
          ]),
          _: 1
        }, 8, ["onClick"])
      ]),
      createVNode(_component_a_tree, {
        checkable: "",
        checkedKeys: _ctx.checkedKeys,
        "onUpdate:checkedKeys": _cache[0] || (_cache[0] = ($event) => _ctx.checkedKeys = $event),
        expandedKeys: _ctx.expandedKeys,
        autoExpandParent: _ctx.autoExpandParent,
        treeData: _ctx.treeData,
        onExpand: _ctx.onExpand
      }, null, 8, ["checkedKeys", "expandedKeys", "autoExpandParent", "treeData", "onExpand"])
    ], 64))
  ]);
}
var AuthFieldTree = _export_sfc(_sfc_main, [["render", _sfc_render], ["__scopeId", "data-v-73e2c712"]]);

export {
  AuthFieldTree
};
//# sourceMappingURL=chunk-GNQBRN3T.js.map
