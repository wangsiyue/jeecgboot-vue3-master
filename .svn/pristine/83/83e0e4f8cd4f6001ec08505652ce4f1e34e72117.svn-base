{
  "version": 3,
  "sources": ["../../../src/hooks/web/useCopyModal.ts"],
  "sourcesContent": ["import { isRef, unref, watch, Ref, ComputedRef } from 'vue';\nimport Clipboard from 'clipboard';\nimport { ModalOptionsEx, useMessage } from '/@/hooks/web/useMessage';\n\n/** \u5E26\u590D\u5236\u6309\u94AE\u7684\u5F39\u7A97 */\ninterface IOptions extends ModalOptionsEx {\n  // \u8981\u590D\u5236\u7684\u6587\u672C\uFF0C\u53EF\u4EE5\u662F\u4E00\u4E2A ref \u5BF9\u8C61\uFF0C\u52A8\u6001\u66F4\u65B0\n  copyText: string | Ref<string> | ComputedRef<string>;\n}\n\nconst COPY_CLASS = 'copy-this-text';\nconst CLIPBOARD_TEXT = 'data-clipboard-text';\n\nexport function useCopyModal() {\n  return { createCopyModal };\n}\n\nconst { createMessage, createConfirm } = useMessage();\n\n/** \u521B\u5EFA\u590D\u5236\u5F39\u7A97 */\nfunction createCopyModal(options: Partial<IOptions>) {\n  let modal = createConfirm({\n    ...options,\n    iconType: options.iconType ?? 'info',\n    width: options.width ?? 500,\n    title: options.title ?? '\u590D\u5236',\n    maskClosable: options.maskClosable ?? true,\n    okText: options.okText ?? '\u590D\u5236',\n    okButtonProps: {\n      ...options.okButtonProps,\n      class: COPY_CLASS,\n      [CLIPBOARD_TEXT]: unref(options.copyText),\n    } as any,\n    onOk() {\n      return new Promise((resolve: any) => {\n        const clipboard = new Clipboard('.' + COPY_CLASS);\n        clipboard.on('success', () => {\n          clipboard.destroy();\n          createMessage.success('\u590D\u5236\u6210\u529F');\n          resolve();\n        });\n        clipboard.on('error', () => {\n          createMessage.error('\u8BE5\u6D4F\u89C8\u5668\u4E0D\u652F\u6301\u81EA\u52A8\u590D\u5236');\n          clipboard.destroy();\n          resolve();\n        });\n      });\n    },\n  });\n\n  // \u52A8\u6001\u66F4\u65B0 copyText\n  if (isRef(options.copyText)) {\n    watch(options.copyText, (copyText) => {\n      modal.update({\n        okButtonProps: {\n          ...options.okButtonProps,\n          class: COPY_CLASS,\n          [CLIPBOARD_TEXT]: copyText,\n        } as any,\n      });\n    });\n  }\n  return modal;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AACA,uBAAsB;AAStB,IAAM,aAAa;AACnB,IAAM,iBAAiB;AAEhB,SAAS,eAAe;AAC7B,SAAO,EAAE,gBAAgB;AAC3B;AAEA,IAAM,EAAE,eAAe,cAAc,IAAI,WAAW;AAGpD,SAAS,gBAAgB,SAA4B;AACnD,MAAI,QAAQ,cAAc;AAAA,IACxB,GAAG;AAAA,IACH,UAAU,QAAQ,YAAY;AAAA,IAC9B,OAAO,QAAQ,SAAS;AAAA,IACxB,OAAO,QAAQ,SAAS;AAAA,IACxB,cAAc,QAAQ,gBAAgB;AAAA,IACtC,QAAQ,QAAQ,UAAU;AAAA,IAC1B,eAAe;AAAA,MACb,GAAG,QAAQ;AAAA,MACX,OAAO;AAAA,MACP,CAAC,iBAAiB,MAAM,QAAQ,QAAQ;AAAA,IAC1C;AAAA,IACA,OAAO;AACL,aAAO,IAAI,QAAQ,CAAC,YAAiB;AACnC,cAAM,YAAY,IAAI,iBAAAA,QAAU,MAAM,UAAU;AAChD,kBAAU,GAAG,WAAW,MAAM;AAC5B,oBAAU,QAAQ;AAClB,wBAAc,QAAQ,0BAAM;AAC5B,kBAAQ;AAAA,QACV,CAAC;AACD,kBAAU,GAAG,SAAS,MAAM;AAC1B,wBAAc,MAAM,oEAAa;AACjC,oBAAU,QAAQ;AAClB,kBAAQ;AAAA,QACV,CAAC;AAAA,MACH,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AAGD,MAAI,MAAM,QAAQ,QAAQ,GAAG;AAC3B,UAAM,QAAQ,UAAU,CAAC,aAAa;AACpC,YAAM,OAAO;AAAA,QACX,eAAe;AAAA,UACb,GAAG,QAAQ;AAAA,UACX,OAAO;AAAA,UACP,CAAC,iBAAiB;AAAA,QACpB;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AACA,SAAO;AACT;",
  "names": ["Clipboard"]
}
