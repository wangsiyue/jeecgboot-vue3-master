{
  "version": 3,
  "sources": ["../../../src/utils/file/download.ts", "../../../src/utils/file/base64Conver.ts"],
  "sourcesContent": ["import { openWindow } from '..';\nimport { dataURLtoBlob, urlToBase64 } from './base64Conver';\n\n/**\n * Download online pictures\n * @param url\n * @param filename\n * @param mime\n * @param bom\n */\nexport function downloadByOnlineUrl(url: string, filename: string, mime?: string, bom?: BlobPart) {\n  urlToBase64(url).then((base64) => {\n    downloadByBase64(base64, filename, mime, bom);\n  });\n}\n\n/**\n * Download pictures based on base64\n * @param buf\n * @param filename\n * @param mime\n * @param bom\n */\nexport function downloadByBase64(buf: string, filename: string, mime?: string, bom?: BlobPart) {\n  const base64Buf = dataURLtoBlob(buf);\n  downloadByData(base64Buf, filename, mime, bom);\n}\n\n/**\n * Download according to the background interface file stream\n * @param {*} data\n * @param {*} filename\n * @param {*} mime\n * @param {*} bom\n */\nexport function downloadByData(data: BlobPart, filename: string, mime?: string, bom?: BlobPart) {\n  const blobData = typeof bom !== 'undefined' ? [bom, data] : [data];\n  const blob = new Blob(blobData, { type: mime || 'application/octet-stream' });\n  if (typeof window.navigator.msSaveBlob !== 'undefined') {\n    window.navigator.msSaveBlob(blob, filename);\n  } else {\n    const blobURL = window.URL.createObjectURL(blob);\n    const tempLink = document.createElement('a');\n    tempLink.style.display = 'none';\n    tempLink.href = blobURL;\n    tempLink.setAttribute('download', filename);\n    if (typeof tempLink.download === 'undefined') {\n      tempLink.setAttribute('target', '_blank');\n    }\n    document.body.appendChild(tempLink);\n    tempLink.click();\n    document.body.removeChild(tempLink);\n    window.URL.revokeObjectURL(blobURL);\n  }\n}\n\n/**\n * Download file according to file address\n * @param {*} sUrl\n */\nexport function downloadByUrl({ url, target = '_blank', fileName }: { url: string; target?: TargetContext; fileName?: string }): boolean {\n  const isChrome = window.navigator.userAgent.toLowerCase().indexOf('chrome') > -1;\n  const isSafari = window.navigator.userAgent.toLowerCase().indexOf('safari') > -1;\n\n  if (/(iP)/g.test(window.navigator.userAgent)) {\n    console.error('Your browser does not support download!');\n    return false;\n  }\n  if (isChrome || isSafari) {\n    const link = document.createElement('a');\n    link.href = url;\n    link.target = target;\n\n    if (link.download !== undefined) {\n      link.download = fileName || url.substring(url.lastIndexOf('/') + 1, url.length);\n    }\n\n    if (document.createEvent) {\n      const e = document.createEvent('MouseEvents');\n      e.initEvent('click', true, true);\n      link.dispatchEvent(e);\n      return true;\n    }\n  }\n  if (url.indexOf('?') === -1) {\n    url += '?download';\n  }\n\n  openWindow(url, { target });\n  return true;\n}\n", "/**\n * @description: base64 to blob\n */\nexport function dataURLtoBlob(base64Buf: string): Blob {\n  const arr = base64Buf.split(',');\n  const typeItem = arr[0];\n  const mime = typeItem.match(/:(.*?);/)![1];\n  const bstr = atob(arr[1]);\n  let n = bstr.length;\n  const u8arr = new Uint8Array(n);\n  while (n--) {\n    u8arr[n] = bstr.charCodeAt(n);\n  }\n  return new Blob([u8arr], { type: mime });\n}\n\n/**\n * img url to base64\n * @param url\n */\nexport function urlToBase64(url: string, mineType?: string): Promise<string> {\n  return new Promise((resolve, reject) => {\n    let canvas = document.createElement('CANVAS') as Nullable<HTMLCanvasElement>;\n    const ctx = canvas!.getContext('2d');\n\n    const img = new Image();\n    img.crossOrigin = '';\n    img.onload = function () {\n      if (!canvas || !ctx) {\n        return reject();\n      }\n      canvas.height = img.height;\n      canvas.width = img.width;\n      ctx.drawImage(img, 0, 0);\n      const dataURL = canvas.toDataURL(mineType || 'image/png');\n      canvas = null;\n      resolve(dataURL);\n    };\n    img.src = url;\n  });\n}\n"],
  "mappings": ";;;;;AAAA;;;ACAA;;;ADmCO,SAAS,eAAe,MAAgB,UAAkB,MAAe,KAAgB;AAC9F,QAAM,WAAW,OAAO,QAAQ,cAAc,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI;AACjE,QAAM,OAAO,IAAI,KAAK,UAAU,EAAE,MAAM,QAAQ,2BAA2B,CAAC;AAC5E,MAAI,OAAO,OAAO,UAAU,eAAe,aAAa;AACtD,WAAO,UAAU,WAAW,MAAM,QAAQ;AAAA,EAC5C,OAAO;AACL,UAAM,UAAU,OAAO,IAAI,gBAAgB,IAAI;AAC/C,UAAM,WAAW,SAAS,cAAc,GAAG;AAC3C,aAAS,MAAM,UAAU;AACzB,aAAS,OAAO;AAChB,aAAS,aAAa,YAAY,QAAQ;AAC1C,QAAI,OAAO,SAAS,aAAa,aAAa;AAC5C,eAAS,aAAa,UAAU,QAAQ;AAAA,IAC1C;AACA,aAAS,KAAK,YAAY,QAAQ;AAClC,aAAS,MAAM;AACf,aAAS,KAAK,YAAY,QAAQ;AAClC,WAAO,IAAI,gBAAgB,OAAO;AAAA,EACpC;AACF;",
  "names": []
}
