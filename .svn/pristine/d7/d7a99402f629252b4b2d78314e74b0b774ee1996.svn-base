import {
  useListButton,
  useOnlineTableContext,
  useTableColumns
} from "./chunk-P3B2JIFG.js";
import {
  OnlineAutoModal
} from "./chunk-37EWWVVV.js";
import {
  OnlineCustomModal
} from "./chunk-Q23FNCRD.js";
import {
  useEnhance
} from "./chunk-K2ZZAGT7.js";
import "./chunk-UYMMAUNI.js";
import {
  OnlineQueryForm
} from "./chunk-5OWFHD6K.js";
import {
  OnlineSuperQuery
} from "./chunk-CXDXHPGW.js";
import "./chunk-AAAW24TK.js";
import "./chunk-TVTOMBKU.js";
import "./chunk-HOLFWHAD.js";
import "./chunk-2UC6MOE4.js";
import "./chunk-CWQVWJAJ.js";
import "./chunk-YFX4JODE.js";
import "./chunk-BDO74DPO.js";
import "./chunk-LEVLXUZ4.js";
import {
  default as default2,
  default2 as default3
} from "./chunk-SEYUDYTJ.js";
import "./chunk-2D5MMSKL.js";
import "./chunk-MHXJV5SW.js";
import "./chunk-ZZBFKWCL.js";
import "./chunk-OMA7JPDB.js";
import "./chunk-DZMOYDKI.js";
import "./chunk-UY63CZ3T.js";
import "./chunk-TNMIRAD5.js";
import "./chunk-EKOIBGOQ.js";
import {
  defHttp
} from "./chunk-MXTOG34P.js";
import "./chunk-SAFWZAHM.js";
import "./chunk-LZQJUVGN.js";
import "./chunk-GH3CBHGS.js";
import "./chunk-ARD7XY2B.js";
import "./chunk-H5XI7H7T.js";
import "./chunk-GPOHKMTD.js";
import "./chunk-RLJKXQIA.js";
import "./chunk-RHCHCTS4.js";
import "./chunk-NRJBE4PY.js";
import {
  _export_sfc
} from "./chunk-GZ7LOGNL.js";
import {
  useMessage
} from "./chunk-SQAXQJKY.js";
import "./chunk-GE6AQLDJ.js";
import "./chunk-RX5I5ULI.js";
import "./chunk-KVJ6VO5A.js";
import "./chunk-WLZB43K5.js";
import "./chunk-GJK6IZYL.js";
import "./chunk-YTTBVVBT.js";
import "./chunk-KIDT26GW.js";
import "./chunk-EW6PF333.js";
import "./chunk-SFFFXB4Y.js";
import "./chunk-4VBCR2UY.js";
import "./chunk-LU447FN7.js";
import "./chunk-PCZNDPKY.js";
import "./chunk-RNTI5KWT.js";
import "./chunk-D2VLAI67.js";
import "./chunk-6AC3D6AH.js";
import "./chunk-ZQYRAJKZ.js";
import "./chunk-Z3NVNWVB.js";
import "./chunk-YXPBMO4E.js";
import "./chunk-WTYZJWFF.js";
import "./chunk-IF4EKY7K.js";
import "./chunk-SOWJBRMK.js";
import "./chunk-JTWWQTIY.js";
import "./chunk-7GOB2L72.js";
import "./chunk-GUMRFUUS.js";
import "./chunk-D65CINXV.js";
import "./chunk-3UC42JCT.js";
import "./chunk-RL4BZ2NY.js";
import "./chunk-MH4EPDFD.js";
import "./chunk-L26JVTZY.js";
import "./chunk-KAI4QMTN.js";
import "./chunk-O3J5FWNC.js";
import "./chunk-SJ2YS27J.js";
import "./chunk-UFII5LNT.js";
import {
  vShow
} from "./chunk-FYK3HJMB.js";
import {
  Fragment,
  createBaseVNode,
  createBlock,
  createCommentVNode,
  createElementBlock,
  createTextVNode,
  createVNode,
  guardReactiveProps,
  mergeProps,
  openBlock,
  ref,
  renderList,
  resolveComponent,
  resolveDynamicComponent,
  toHandlers,
  watch,
  withCtx,
  withDirectives
} from "./chunk-JQQZ4WSS.js";
import "./chunk-G5TZ7427.js";
import {
  normalizeClass,
  normalizeProps,
  toDisplayString
} from "./chunk-EDBTC3WO.js";
import {
  init_define_APP_INFO
} from "./chunk-ET6QIZHT.js";

// node_modules/@jeecg/online/OnlineAutoTreeList.js
init_define_APP_INFO();
import JImportModal from "D:/jeecgboot-vue3-master/src/components/Form/src/jeecg/components/JImportModal.vue";
import "D:/jeecgboot-vue3-master/src/components/jeecg/OnLine/JPopupOnlReport.vue";
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var _sfc_main = {
  name: "DefaultOnlineList",
  components: {
    BasicTable: default2,
    TableAction: default3,
    OnlineAutoModal,
    JImportModal,
    OnlineQueryForm,
    OnlineSuperQuery,
    OnlineCustomModal
  },
  setup() {
    const { createMessage: $message } = useMessage();
    const onlineTreeTableRef = ref();
    const {
      ID,
      onlineTableContext,
      onlineQueryFormOuter,
      loading,
      reload,
      dataSource,
      pagination,
      handleSpecialConfig,
      getColumnList,
      handleChangeInTable,
      loadData,
      superQueryButtonRef,
      superQueryStatus,
      handleSuperQuery,
      registerCustomModal,
      getTreeDataByResult,
      expandedRowKeys,
      handleExpandedRowsChange
    } = useOnlineTableContext();
    if (!ID.value) {
      $message.warning("\u5730\u5740\u9519\u8BEF, \u914D\u7F6EID\u4E0D\u5B58\u5728!");
      return;
    }
    onlineTableContext.isTree(true);
    let { initCgEnhanceJs } = useEnhance(onlineTableContext);
    const {
      buttonSwitch,
      cgLinkButtonList,
      cgTopButtonList,
      importUrl,
      registerModal,
      handleAdd,
      handleEdit,
      handleBatchDelete,
      registerImportModal,
      onImportExcel,
      onExportExcel,
      cgButtonJsHandler,
      cgButtonActionHandler,
      cgButtonLinkHandler,
      handleSubmitFlow,
      getDropDownActions,
      getActions,
      initButtonList,
      initButtonSwitch
    } = useListButton(onlineTableContext);
    const {
      columns,
      actionColumn,
      selectedKeys,
      rowSelection,
      enableScrollBar,
      tableScroll,
      downloadRowFile,
      getImgView,
      getPcaText,
      getFormatDate,
      handleColumnResult,
      hrefComponent,
      viewOnlineCellImage
    } = useTableColumns(onlineTableContext);
    watch(ID, () => {
      initAutoList();
    }, { immediate: true });
    function initAutoList() {
      return __async(this, null, function* () {
        loading.value = true;
        let columnResult = yield getColumnList();
        handleTableConfig(columnResult);
        yield loadData();
        loading.value = false;
        onlineTableContext.execButtonEnhance("setup");
      });
    }
    function handleTableConfig(result) {
      let EnhanceJS = initCgEnhanceJs(result.enhanceJs);
      onlineTableContext["EnhanceJS"] = EnhanceJS;
      initButtonList(result.cgButtonList);
      initButtonSwitch(result.hideColumns);
      handleColumnResult(result);
      handleSpecialConfig(result);
      onlineTableContext["hasChildrenField"] = result.hasChildrenField;
      onlineTableContext["pidField"] = result.pidField;
    }
    function queryWithCondition(data, status) {
      onlineTableContext["queryParam"] = data;
      if (status === true) {
        reload();
      } else {
        searchReset();
      }
    }
    function onQueryFormLoaded(json) {
      superQueryButtonRef.value.init(json);
    }
    function handleExpand(expanded, record) {
      let expandedRowKeysValue = expandedRowKeys.value;
      if (expanded) {
        addExpandedRowKey(record.id);
        if (record.children.length > 0 && record.children[0].isLoading === true) {
          let hasChildrenField = onlineTableContext.hasChildrenField;
          const { sortField, sortType } = onlineTableContext;
          let params = Object.assign({}, { column: sortField, order: sortType });
          params[onlineTableContext["pidField"]] = record.id;
          params[hasChildrenField] = record[hasChildrenField];
          let url = `${onlineTableContext.onlineUrl.getTreeData}${onlineTableContext.ID}`;
          defHttp.get({ url, params }, { isTransformResponse: false }).then((res) => {
            console.log("handleExpand", res.result);
            if (res.success) {
              if (Number(res.result.total) > 0) {
                record.children = getTreeDataByResult(res.result.records);
              } else {
                record.children = "";
                record.hasChildrenField = "0";
              }
            } else {
              $message.warning(res.message);
            }
          }).catch(() => {
            $message.warning("\u52A0\u8F7D\u5B50\u8282\u70B9\u5931\u8D25!");
          });
        }
      } else {
        let keyIndex = expandedRowKeysValue.indexOf(record.id);
        if (keyIndex >= 0) {
          expandedRowKeys.value = expandedRowKeysValue.splice(keyIndex, 1);
        }
      }
    }
    function addExpandedRowKey(key) {
      let arr = expandedRowKeys.value;
      if (arr && arr.indexOf(key) < 0) {
        arr.push(key);
      }
      expandedRowKeys.value = arr;
    }
    function searchReset() {
      return __async(this, null, function* () {
        if (onlineTableContext.isTree() === true) {
          expandedRowKeys.value = [];
          onlineTreeTableRef.value.collapseAll();
        }
        reload();
      });
    }
    function handlerFormSuccess(formData) {
      console.log("expandedRowKeys.value", expandedRowKeys.value);
      if (loadParent.value === true) {
        let pid = formData[onlineTableContext.pidField];
        if (pid) {
          let arr = expandedRowKeys.value;
          if (arr.indexOf(pid) < 0) {
            arr.push(pid);
          }
          expandedRowKeys.value = arr;
        }
      }
      reload();
    }
    const addChildButton = (record) => {
      return {
        label: "\u6DFB\u52A0\u5B50\u8282\u70B9",
        onClick: handleAddChild.bind(null, record)
      };
    };
    const loadParent = ref(false);
    function handleAddChild(record) {
      loadParent.value = true;
      let param = {
        [onlineTableContext.pidField]: record["id"]
      };
      handleAdd(param);
    }
    function getTreeDropDownActions(record) {
      let arr = getDropDownActions(record);
      arr.unshift(addChildButton(record));
      return arr;
    }
    const that = {
      ID,
      onlineQueryFormOuter,
      queryWithCondition,
      onQueryFormLoaded,
      reload,
      superQueryButtonRef,
      superQueryStatus,
      handleSuperQuery,
      loading,
      columns,
      actionColumn,
      dataSource,
      pagination,
      rowSelection,
      selectedKeys,
      tableScroll,
      enableScrollBar,
      handleChangeInTable,
      buttonSwitch,
      handleAdd,
      handleEdit,
      onImportExcel,
      onExportExcel,
      cgTopButtonList,
      cgLinkButtonList,
      cgButtonJsHandler,
      cgButtonActionHandler,
      cgButtonLinkHandler,
      handleBatchDelete,
      downloadRowFile,
      getImgView,
      getPcaText,
      getFormatDate,
      getActions,
      getTreeDropDownActions,
      registerModal,
      registerCustomModal,
      registerImportModal,
      importUrl,
      handleSubmitFlow,
      hrefComponent,
      viewOnlineCellImage,
      onlineTreeTableRef,
      handlerFormSuccess,
      searchReset,
      handleExpand,
      expandedRowKeys,
      handleExpandedRowsChange
    };
    return that;
  }
};
var _hoisted_1 = { class: "p-2" };
var _hoisted_2 = createTextVNode("\u65B0\u589E");
var _hoisted_3 = createTextVNode("\u5BFC\u5165");
var _hoisted_4 = createTextVNode(" \u5BFC\u51FA");
var _hoisted_5 = createTextVNode(" \u6279\u91CF\u5220\u9664");
var _hoisted_6 = {
  key: 0,
  style: { "font-size": "12px", "font-style": "italic" }
};
var _hoisted_7 = createTextVNode(" \u4E0B\u8F7D ");
var _hoisted_8 = {
  key: 0,
  style: { "font-size": "12px", "font-style": "italic" }
};
var _hoisted_9 = ["src", "onClick"];
var _hoisted_10 = ["innerHTML"];
var _hoisted_11 = ["title"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_online_query_form = resolveComponent("online-query-form");
  const _component_a_button = resolveComponent("a-button");
  const _component_online_super_query = resolveComponent("online-super-query");
  const _component_TableAction = resolveComponent("TableAction");
  const _component_BasicTable = resolveComponent("BasicTable");
  const _component_OnlineAutoModal = resolveComponent("OnlineAutoModal");
  const _component_JImportModal = resolveComponent("JImportModal");
  const _component_a_modal = resolveComponent("a-modal");
  const _component_online_custom_modal = resolveComponent("online-custom-modal");
  return openBlock(), createElementBlock("div", _hoisted_1, [
    createVNode(_component_online_query_form, {
      ref: "onlineQueryFormOuter",
      id: _ctx.ID,
      onSearch: _ctx.queryWithCondition,
      onLoaded: _ctx.onQueryFormLoaded
    }, null, 8, ["id", "onSearch", "onLoaded"]),
    createVNode(_component_BasicTable, {
      ref: "onlineTreeTableRef",
      isTreeTable: true,
      expandedRowKeys: _ctx.expandedRowKeys,
      onExpandedRowsChange: _ctx.handleExpandedRowsChange,
      onExpand: _ctx.handleExpand,
      rowKey: "jeecg_row_key",
      canResize: true,
      bordered: true,
      showIndexColumn: false,
      loading: _ctx.loading,
      columns: _ctx.columns,
      dataSource: _ctx.dataSource,
      pagination: _ctx.pagination,
      rowSelection: _ctx.rowSelection,
      actionColumn: _ctx.actionColumn,
      showTableSetting: true,
      clickToRowSelect: false,
      scroll: _ctx.tableScroll,
      onTableRedo: _ctx.reload,
      class: normalizeClass({ "j-table-force-nowrap": _ctx.enableScrollBar }),
      onChange: _ctx.handleChangeInTable
    }, {
      tableTitle: withCtx(() => [
        _ctx.buttonSwitch.add ? (openBlock(), createBlock(_component_a_button, {
          key: 0,
          preIcon: "ant-design:plus-outlined",
          type: "primary",
          onClick: _ctx.handleAdd
        }, {
          default: withCtx(() => [
            _hoisted_2
          ]),
          _: 1
        }, 8, ["onClick"])) : createCommentVNode("", true),
        _ctx.buttonSwitch.import ? (openBlock(), createBlock(_component_a_button, {
          key: 1,
          preIcon: "ant-design:import-outlined",
          type: "primary",
          onClick: _ctx.onImportExcel
        }, {
          default: withCtx(() => [
            _hoisted_3
          ]),
          _: 1
        }, 8, ["onClick"])) : createCommentVNode("", true),
        _ctx.buttonSwitch.export ? (openBlock(), createBlock(_component_a_button, {
          key: 2,
          preIcon: "ant-design:export-outlined",
          type: "primary",
          onClick: _ctx.onExportExcel
        }, {
          default: withCtx(() => [
            _hoisted_4
          ]),
          _: 1
        }, 8, ["onClick"])) : createCommentVNode("", true),
        _ctx.cgTopButtonList && _ctx.cgTopButtonList.length > 0 ? (openBlock(true), createElementBlock(Fragment, { key: 3 }, renderList(_ctx.cgTopButtonList, (item, index) => {
          return openBlock(), createElementBlock(Fragment, null, [
            item.optType == "js" ? (openBlock(), createBlock(_component_a_button, {
              key: "cgbtn" + index,
              onClick: ($event) => _ctx.cgButtonJsHandler(item.buttonCode),
              type: "primary",
              preIcon: item.buttonIcon ? "ant-design:" + item.buttonIcon : ""
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString(item.buttonName), 1)
              ]),
              _: 2
            }, 1032, ["onClick", "preIcon"])) : item.optType == "action" ? (openBlock(), createBlock(_component_a_button, {
              key: "cgbtn" + index,
              onClick: ($event) => _ctx.cgButtonActionHandler(item.buttonCode),
              type: "primary",
              preIcon: item.buttonIcon ? "ant-design:" + item.buttonIcon : ""
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString(item.buttonName), 1)
              ]),
              _: 2
            }, 1032, ["onClick", "preIcon"])) : createCommentVNode("", true)
          ], 64);
        }), 256)) : createCommentVNode("", true),
        _ctx.buttonSwitch.batch_delete ? withDirectives((openBlock(), createBlock(_component_a_button, {
          key: 4,
          preIcon: "ant-design:delete-outlined",
          onClick: _ctx.handleBatchDelete
        }, {
          default: withCtx(() => [
            _hoisted_5
          ]),
          _: 1
        }, 8, ["onClick"])), [
          [vShow, _ctx.selectedKeys.length > 0]
        ]) : createCommentVNode("", true),
        _ctx.buttonSwitch.super_query ? (openBlock(), createBlock(_component_online_super_query, {
          key: 5,
          ref: "superQueryButtonRef",
          status: _ctx.superQueryStatus,
          onSearch: _ctx.handleSuperQuery
        }, null, 8, ["status", "onSearch"])) : createCommentVNode("", true)
      ]),
      fileSlot: withCtx(({ text }) => [
        !text ? (openBlock(), createElementBlock("span", _hoisted_6, "\u65E0\u6587\u4EF6")) : (openBlock(), createBlock(_component_a_button, {
          key: 1,
          ghost: true,
          type: "primary",
          preIcon: "ant-design:download",
          size: "small",
          onClick: ($event) => _ctx.downloadRowFile(text)
        }, {
          default: withCtx(() => [
            _hoisted_7
          ]),
          _: 2
        }, 1032, ["onClick"]))
      ]),
      imgSlot: withCtx(({ text }) => [
        !text ? (openBlock(), createElementBlock("span", _hoisted_8, "\u65E0\u56FE\u7247")) : (openBlock(), createElementBlock("img", {
          key: 1,
          src: _ctx.getImgView(text),
          alt: "\u56FE\u7247\u4E0D\u5B58\u5728",
          class: "online-cell-image",
          onClick: ($event) => _ctx.viewOnlineCellImage(text)
        }, null, 8, _hoisted_9))
      ]),
      htmlSlot: withCtx(({ text }) => [
        createBaseVNode("div", { innerHTML: text }, null, 8, _hoisted_10)
      ]),
      pcaSlot: withCtx(({ text }) => [
        createBaseVNode("div", {
          title: _ctx.getPcaText(text)
        }, toDisplayString(_ctx.getPcaText(text)), 9, _hoisted_11)
      ]),
      dateSlot: withCtx(({ text }) => [
        createBaseVNode("span", null, toDisplayString(_ctx.getFormatDate(text)), 1)
      ]),
      action: withCtx(({ record }) => [
        createVNode(_component_TableAction, {
          actions: _ctx.getActions(record),
          dropDownActions: _ctx.getTreeDropDownActions(record)
        }, null, 8, ["actions", "dropDownActions"])
      ]),
      _: 1
    }, 8, ["expandedRowKeys", "onExpandedRowsChange", "onExpand", "loading", "columns", "dataSource", "pagination", "rowSelection", "actionColumn", "scroll", "onTableRedo", "class", "onChange"]),
    createVNode(_component_OnlineAutoModal, {
      id: _ctx.ID,
      onRegister: _ctx.registerModal,
      onSuccess: _ctx.handlerFormSuccess
    }, null, 8, ["id", "onRegister", "onSuccess"]),
    createVNode(_component_JImportModal, {
      onRegister: _ctx.registerImportModal,
      url: _ctx.importUrl(),
      onOk: _ctx.reload,
      online: ""
    }, null, 8, ["onRegister", "url", "onOk"]),
    createVNode(_component_a_modal, mergeProps(_ctx.hrefComponent.model, toHandlers(_ctx.hrefComponent.on)), {
      default: withCtx(() => [
        (openBlock(), createBlock(resolveDynamicComponent(_ctx.hrefComponent.is), normalizeProps(guardReactiveProps(_ctx.hrefComponent.params)), null, 16))
      ]),
      _: 1
    }, 16),
    createVNode(_component_online_custom_modal, {
      onRegister: _ctx.registerCustomModal,
      onSuccess: _ctx.reload
    }, null, 8, ["onRegister", "onSuccess"])
  ]);
}
var OnlineAutoTreeList = _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  OnlineAutoTreeList as default
};
//# sourceMappingURL=OnlineAutoTreeList-OJPJE27H.js.map
