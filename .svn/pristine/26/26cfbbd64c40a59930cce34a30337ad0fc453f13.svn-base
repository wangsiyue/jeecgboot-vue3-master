{
  "version": 3,
  "sources": ["../../../src/components/Table/src/hooks/useTable.ts", "../../../src/components/Table/index.ts", "../../../src/components/Table/src/types/table.ts", "../../../src/components/Table/src/types/pagination.ts", "../../../src/components/Table/src/types/tableAction.ts"],
  "sourcesContent": ["import type { BasicTableProps, TableActionType, FetchParams, BasicColumn } from '../types/table';\nimport type { PaginationProps } from '../types/pagination';\nimport type { DynamicProps } from '/#/utils';\nimport type { FormActionType } from '/@/components/Form';\nimport type { WatchStopHandle } from 'vue';\nimport { getDynamicProps } from '/@/utils';\nimport { ref, onUnmounted, unref, watch, toRaw } from 'vue';\nimport { isProdMode } from '/@/utils/env';\nimport { error } from '/@/utils/log';\n\ntype Props = Partial<DynamicProps<BasicTableProps>>;\n\ntype UseTableMethod = TableActionType & {\n  getForm: () => FormActionType;\n};\n\nexport function useTable(tableProps?: Props): [\n  (instance: TableActionType, formInstance: UseTableMethod) => void,\n  TableActionType & {\n    getForm: () => FormActionType;\n  }\n] {\n  const tableRef = ref<Nullable<TableActionType>>(null);\n  const loadedRef = ref<Nullable<boolean>>(false);\n  const formRef = ref<Nullable<UseTableMethod>>(null);\n\n  let stopWatch: WatchStopHandle;\n\n  function register(instance: TableActionType, formInstance: UseTableMethod) {\n    isProdMode() &&\n      onUnmounted(() => {\n        tableRef.value = null;\n        loadedRef.value = null;\n      });\n\n    if (unref(loadedRef) && isProdMode() && instance === unref(tableRef)) return;\n\n    tableRef.value = instance;\n    formRef.value = formInstance;\n    tableProps && instance.setProps(getDynamicProps(tableProps));\n    loadedRef.value = true;\n\n    stopWatch?.();\n\n    stopWatch = watch(\n      () => tableProps,\n      () => {\n        tableProps && instance.setProps(getDynamicProps(tableProps));\n      },\n      {\n        immediate: true,\n        deep: true,\n      }\n    );\n  }\n\n  function getTableInstance(): TableActionType {\n    const table = unref(tableRef);\n    if (!table) {\n      error('The table instance has not been obtained yet, please make sure the table is presented when performing the table operation!');\n    }\n    return table as TableActionType;\n  }\n\n  const methods: TableActionType & {\n    getForm: () => FormActionType;\n  } = {\n    reload: async (opt?: FetchParams) => {\n      return await getTableInstance().reload(opt);\n    },\n    setProps: (props: Partial<BasicTableProps>) => {\n      getTableInstance().setProps(props);\n    },\n    redoHeight: () => {\n      getTableInstance().redoHeight();\n    },\n    setLoading: (loading: boolean) => {\n      getTableInstance().setLoading(loading);\n    },\n    getDataSource: () => {\n      return getTableInstance().getDataSource();\n    },\n    getRawDataSource: () => {\n      return getTableInstance().getRawDataSource();\n    },\n    getColumns: ({ ignoreIndex = false }: { ignoreIndex?: boolean } = {}) => {\n      const columns = getTableInstance().getColumns({ ignoreIndex }) || [];\n      return toRaw(columns);\n    },\n    setColumns: (columns: BasicColumn[]) => {\n      getTableInstance().setColumns(columns);\n    },\n    setTableData: (values: any[]) => {\n      return getTableInstance().setTableData(values);\n    },\n    setPagination: (info: Partial<PaginationProps>) => {\n      return getTableInstance().setPagination(info);\n    },\n    deleteSelectRowByKey: (key: string) => {\n      getTableInstance().deleteSelectRowByKey(key);\n    },\n    getSelectRowKeys: () => {\n      return toRaw(getTableInstance().getSelectRowKeys());\n    },\n    getSelectRows: () => {\n      return toRaw(getTableInstance().getSelectRows());\n    },\n    clearSelectedRowKeys: () => {\n      getTableInstance().clearSelectedRowKeys();\n    },\n    setSelectedRowKeys: (keys: string[] | number[]) => {\n      getTableInstance().setSelectedRowKeys(keys);\n    },\n    getPaginationRef: () => {\n      return getTableInstance().getPaginationRef();\n    },\n    getSize: () => {\n      return toRaw(getTableInstance().getSize());\n    },\n    updateTableData: (index: number, key: string, value: any) => {\n      return getTableInstance().updateTableData(index, key, value);\n    },\n    deleteTableDataRecord: (rowKey: string | number | string[] | number[]) => {\n      return getTableInstance().deleteTableDataRecord(rowKey);\n    },\n    insertTableDataRecord: (record: Recordable | Recordable[], index?: number) => {\n      return getTableInstance().insertTableDataRecord(record, index);\n    },\n    updateTableDataRecord: (rowKey: string | number, record: Recordable) => {\n      return getTableInstance().updateTableDataRecord(rowKey, record);\n    },\n    findTableDataRecord: (rowKey: string | number) => {\n      return getTableInstance().findTableDataRecord(rowKey);\n    },\n    getRowSelection: () => {\n      return toRaw(getTableInstance().getRowSelection());\n    },\n    getCacheColumns: () => {\n      return toRaw(getTableInstance().getCacheColumns());\n    },\n    getForm: () => {\n      return unref(formRef) as unknown as FormActionType;\n    },\n    setShowPagination: async (show: boolean) => {\n      getTableInstance().setShowPagination(show);\n    },\n    getShowPagination: () => {\n      return toRaw(getTableInstance().getShowPagination());\n    },\n    expandAll: () => {\n      getTableInstance().expandAll();\n    },\n    collapseAll: () => {\n      getTableInstance().collapseAll();\n    },\n  };\n\n  return [register, methods];\n}\n", "export { default as BasicTable } from './src/BasicTable.vue';\nexport { default as TableAction } from './src/components/TableAction.vue';\nexport { default as EditTableHeaderIcon } from './src/components/EditTableHeaderIcon.vue';\nexport { default as TableImg } from './src/components/TableImg.vue';\nexport * from './src/types/table';\nexport * from './src/types/pagination';\nexport * from './src/types/tableAction';\nexport { useTable } from './src/hooks/useTable';\nexport type { FormSchema, FormProps } from '/@/components/Form/src/types/form';\nexport type { EditRecordRow } from './src/components/editable';\n", "import type { VNodeChild } from 'vue';\nimport type { PaginationProps } from './pagination';\nimport type { FormProps } from '/@/components/Form';\nimport type { TableRowSelection as ITableRowSelection } from 'ant-design-vue/lib/table/interface';\nimport type { ColumnProps } from 'ant-design-vue/lib/table';\n\nimport { ComponentType } from './componentType';\nimport { VueNode } from '/@/utils/propTypes';\nimport { RoleEnum } from '/@/enums/roleEnum';\n\nexport declare type SortOrder = 'ascend' | 'descend';\n\nexport interface TableCurrentDataSource<T = Recordable> {\n  currentDataSource: T[];\n}\n\nexport interface TableRowSelection<T = any> extends ITableRowSelection {\n  /**\n   * Callback executed when selected rows change\n   * @type Function\n   */\n  onChange?: (selectedRowKeys: string[] | number[], selectedRows: T[]) => any;\n\n  /**\n   * Callback executed when select/deselect one row\n   * @type Function\n   */\n  onSelect?: (record: T, selected: boolean, selectedRows: Object[], nativeEvent: Event) => any;\n\n  /**\n   * Callback executed when select/deselect all rows\n   * @type Function\n   */\n  onSelectAll?: (selected: boolean, selectedRows: T[], changeRows: T[]) => any;\n\n  /**\n   * Callback executed when row selection is inverted\n   * @type Function\n   */\n  onSelectInvert?: (selectedRows: string[] | number[]) => any;\n}\n\nexport interface TableCustomRecord<T> {\n  record?: T;\n  index?: number;\n}\n\nexport interface ExpandedRowRenderRecord<T> extends TableCustomRecord<T> {\n  indent?: number;\n  expanded?: boolean;\n}\n\nexport interface ColumnFilterItem {\n  text?: string;\n  value?: string;\n  children?: any;\n}\n\nexport interface TableCustomRecord<T = Recordable> {\n  record?: T;\n  index?: number;\n}\n\nexport interface SorterResult {\n  column: ColumnProps;\n  order: SortOrder;\n  field: string;\n  columnKey: string;\n}\n\nexport interface FetchParams {\n  searchInfo?: Recordable;\n  page?: number;\n  sortInfo?: Recordable;\n  filterInfo?: Recordable;\n}\n\nexport interface GetColumnsParams {\n  ignoreIndex?: boolean;\n  ignoreAction?: boolean;\n  sort?: boolean;\n}\n\nexport type SizeType = 'default' | 'middle' | 'small' | 'large';\n\nexport interface TableActionType {\n  reload: (opt?: FetchParams) => Promise<void>;\n  getSelectRows: <T = Recordable>() => T[];\n  clearSelectedRowKeys: () => void;\n  expandAll: () => void;\n  collapseAll: () => void;\n  getSelectRowKeys: () => string[];\n  deleteSelectRowByKey: (key: string) => void;\n  setPagination: (info: Partial<PaginationProps>) => void;\n  setTableData: <T = Recordable>(values: T[]) => void;\n  updateTableDataRecord: (rowKey: string | number, record: Recordable) => Recordable | void;\n  deleteTableDataRecord: (rowKey: string | number | string[] | number[]) => void;\n  insertTableDataRecord: (record: Recordable, index?: number) => Recordable | void;\n  findTableDataRecord: (rowKey: string | number) => Recordable | void;\n  getColumns: (opt?: GetColumnsParams) => BasicColumn[];\n  setColumns: (columns: BasicColumn[] | string[]) => void;\n  getDataSource: <T = Recordable>() => T[];\n  getRawDataSource: <T = Recordable>() => T;\n  setLoading: (loading: boolean) => void;\n  setProps: (props: Partial<BasicTableProps>) => void;\n  redoHeight: () => void;\n  setSelectedRowKeys: (rowKeys: string[] | number[]) => void;\n  getPaginationRef: () => PaginationProps | boolean;\n  getSize: () => SizeType;\n  getRowSelection: () => TableRowSelection<Recordable>;\n  getCacheColumns: () => BasicColumn[];\n  emit?: EmitType;\n  updateTableData: (index: number, key: string, value: any) => Recordable;\n  setShowPagination: (show: boolean) => Promise<void>;\n  getShowPagination: () => boolean;\n  setCacheColumnsByField?: (dataIndex: string | undefined, value: BasicColumn) => void;\n}\n\nexport interface FetchSetting {\n  // \u8BF7\u6C42\u63A5\u53E3\u5F53\u524D\u9875\u6570\n  pageField: string;\n  // \u6BCF\u9875\u663E\u793A\u591A\u5C11\u6761\n  sizeField: string;\n  // \u8BF7\u6C42\u7ED3\u679C\u5217\u8868\u5B57\u6BB5  \u652F\u6301 a.b.c\n  listField: string;\n  // \u8BF7\u6C42\u7ED3\u679C\u603B\u6570\u5B57\u6BB5  \u652F\u6301 a.b.c\n  totalField: string;\n}\n\nexport interface TableSetting {\n  // \u662F\u5426\u663E\u793A\u5237\u65B0\u6309\u94AE\n  redo?: boolean;\n  // \u662F\u5426\u663E\u793A\u5C3A\u5BF8\u8C03\u6574\u6309\u94AE\n  size?: boolean;\n  // \u662F\u5426\u663E\u793A\u5B57\u6BB5\u8C03\u6574\u6309\u94AE\n  setting?: boolean;\n  // \u7F13\u5B58\u201C\u5B57\u6BB5\u8C03\u6574\u201D\u914D\u7F6E\u7684key\uFF0C\u7528\u4E8E\u9875\u9762\u4E0A\u6709\u591A\u4E2A\u8868\u683C\u9700\u8981\u533A\u5206\u7684\u60C5\u51B5\n  cacheKey?: string;\n  // \u662F\u5426\u663E\u793A\u5168\u5C4F\u6309\u94AE\n  fullScreen?: boolean;\n}\n\nexport interface BasicTableProps<T = any> {\n  // \u70B9\u51FB\u884C\u9009\u4E2D\n  clickToRowSelect?: boolean;\n  isTreeTable?: boolean;\n  // \u81EA\u5B9A\u4E49\u6392\u5E8F\u65B9\u6CD5\n  sortFn?: (sortInfo: SorterResult) => any;\n  // \u6392\u5E8F\u65B9\u6CD5\n  filterFn?: (data: Partial<Recordable<string[]>>) => any;\n  // \u53D6\u6D88\u8868\u683C\u7684\u9ED8\u8BA4padding\n  inset?: boolean;\n  // \u663E\u793A\u8868\u683C\u8BBE\u7F6E\n  showTableSetting?: boolean;\n  tableSetting?: TableSetting;\n  // \u6591\u9A6C\u7EB9\n  striped?: boolean;\n  // \u662F\u5426\u81EA\u52A8\u751F\u6210key\n  autoCreateKey?: boolean;\n  // \u8BA1\u7B97\u5408\u8BA1\u884C\u7684\u65B9\u6CD5\n  summaryFunc?: (...arg: any) => Recordable[];\n  // \u81EA\u5B9A\u4E49\u5408\u8BA1\u8868\u683C\u5185\u5BB9\n  summaryData?: Recordable[];\n  // \u662F\u5426\u663E\u793A\u5408\u8BA1\u884C\n  showSummary?: boolean;\n  // \u662F\u5426\u53EF\u62D6\u62FD\u5217\n  canColDrag?: boolean;\n  // \u63A5\u53E3\u8BF7\u6C42\u5BF9\u8C61\n  api?: (...arg: any) => Promise<any>;\n  // \u8BF7\u6C42\u4E4B\u524D\u5904\u7406\u53C2\u6570\n  beforeFetch?: Fn;\n  // \u81EA\u5B9A\u4E49\u5904\u7406\u63A5\u53E3\u8FD4\u56DE\u53C2\u6570\n  afterFetch?: Fn;\n  // \u67E5\u8BE2\u6761\u4EF6\u8BF7\u6C42\u4E4B\u524D\u5904\u7406\n  handleSearchInfoFn?: Fn;\n  // \u8BF7\u6C42\u63A5\u53E3\u914D\u7F6E\n  fetchSetting?: Partial<FetchSetting>;\n  // \u7ACB\u5373\u8BF7\u6C42\u63A5\u53E3\n  immediate?: boolean;\n  // \u5728\u5F00\u8D77\u641C\u7D22\u8868\u5355\u7684\u65F6\u5019\uFF0C\u5982\u679C\u6CA1\u6709\u6570\u636E\u662F\u5426\u663E\u793A\u8868\u683C\n  emptyDataIsShowTable?: boolean;\n  // \u989D\u5916\u7684\u8BF7\u6C42\u53C2\u6570\n  searchInfo?: Recordable;\n  // \u9ED8\u8BA4\u7684\u6392\u5E8F\u53C2\u6570\n  defSort?: Recordable;\n  // \u4F7F\u7528\u641C\u7D22\u8868\u5355\n  useSearchForm?: boolean;\n  // \u8868\u5355\u914D\u7F6E\n  formConfig?: Partial<FormProps>;\n  // \u5217\u914D\u7F6E\n  columns: BasicColumn[];\n  // \u662F\u5426\u663E\u793A\u5E8F\u53F7\u5217\n  showIndexColumn?: boolean;\n  // \u5E8F\u53F7\u5217\u914D\u7F6E\n  indexColumnProps?: BasicColumn;\n  // \u662F\u5426\u663E\u793A\u64CD\u4F5C\u5217\n  showActionColumn?: boolean;\n  // \u64CD\u4F5C\u5217\u914D\u7F6E\n  actionColumn?: BasicColumn;\n  // \u6587\u672C\u8D85\u8FC7\u5BBD\u5EA6\u662F\u5426\u663E\u793A\u3002\u3002\u3002\n  ellipsis?: boolean;\n  // \u662F\u5426\u53EF\u4EE5\u81EA\u9002\u5E94\u9AD8\u5EA6\n  canResize?: boolean;\n  // \u81EA\u9002\u5E94\u9AD8\u5EA6\u504F\u79FB\uFF0C \u8BA1\u7B97\u7ED3\u679C-\u504F\u79FB\u91CF\n  resizeHeightOffset?: number;\n\n  // \u5728\u5206\u9875\u6539\u53D8\u7684\u65F6\u5019\u6E05\u7A7A\u9009\u9879\n  clearSelectOnPageChange?: boolean;\n  //\n  rowKey?: string | ((record: Recordable) => string);\n  // \u6570\u636E\n  dataSource?: Recordable[];\n  // \u6807\u9898\u53F3\u4FA7\u63D0\u793A\n  titleHelpMessage?: string | string[];\n  // \u8868\u683C\u6700\u5C0F\u9AD8\u5EA6\n  minHeight?: number;\n  // \u8868\u683C\u6EDA\u52A8\u6700\u5927\u9AD8\u5EA6\n  maxHeight?: number;\n  // \u662F\u5426\u663E\u793A\u8FB9\u6846\n  bordered?: boolean;\n  // \u5206\u9875\u914D\u7F6E\n  pagination?: PaginationProps | boolean;\n  // loading\u52A0\u8F7D\n  loading?: boolean;\n\n  /**\n   * The column contains children to display\n   * @default 'children'\n   * @type string | string[]\n   */\n  childrenColumnName?: string;\n\n  /**\n   * Override default table elements\n   * @type object\n   */\n  components?: object;\n\n  /**\n   * Expand all rows initially\n   * @default false\n   * @type boolean\n   */\n  defaultExpandAllRows?: boolean;\n\n  /**\n   * Initial expanded row keys\n   * @type string[]\n   */\n  defaultExpandedRowKeys?: string[];\n\n  /**\n   * Current expanded row keys\n   * @type string[]\n   */\n  expandedRowKeys?: string[];\n\n  /**\n   * Expanded container render for each row\n   * @type Function\n   */\n  expandedRowRender?: (record?: ExpandedRowRenderRecord<T>) => VNodeChild | JSX.Element;\n\n  /**\n   * Customize row expand Icon.\n   * @type Function | VNodeChild\n   */\n  expandIcon?: Function | VNodeChild | JSX.Element;\n\n  /**\n   * Whether to expand row by clicking anywhere in the whole row\n   * @default false\n   * @type boolean\n   */\n  expandRowByClick?: boolean;\n\n  /**\n   * The index of `expandIcon` which column will be inserted when `expandIconAsCell` is false. default 0\n   */\n  expandIconColumnIndex?: number;\n\n  /**\n   * Table footer renderer\n   * @type Function | VNodeChild\n   */\n  footer?: Function | VNodeChild | JSX.Element;\n\n  /**\n   * Indent size in pixels of tree data\n   * @default 15\n   * @type number\n   */\n  indentSize?: number;\n\n  /**\n   * i18n text including filter, sort, empty text, etc\n   * @default { filterConfirm: 'Ok', filterReset: 'Reset', emptyText: 'No Data' }\n   * @type object\n   */\n  locale?: object;\n\n  /**\n   * Row's className\n   * @type Function\n   */\n  rowClassName?: (record: TableCustomRecord<T>, index: number) => string;\n\n  /**\n   * Row selection config\n   * @type object\n   */\n  rowSelection?: TableRowSelection;\n\n  /**\n   * Set horizontal or vertical scrolling, can also be used to specify the width and height of the scroll area.\n   * It is recommended to set a number for x, if you want to set it to true,\n   * you need to add style .ant-table td { white-space: nowrap; }.\n   * @type object\n   */\n  scroll?: { x?: number | true; y?: number };\n\n  /**\n   * Whether to show table header\n   * @default true\n   * @type boolean\n   */\n  showHeader?: boolean;\n\n  /**\n   * Size of table\n   * @default 'default'\n   * @type string\n   */\n  size?: SizeType;\n\n  /**\n   * Table title renderer\n   * @type Function | ScopedSlot\n   */\n  title?: VNodeChild | JSX.Element | string | ((data: Recordable) => string);\n\n  /**\n   * Set props on per header row\n   * @type Function\n   */\n  customHeaderRow?: (column: ColumnProps, index: number) => object;\n\n  /**\n   * Set props on per row\n   * @type Function\n   */\n  customRow?: (record: T, index: number) => object;\n\n  /**\n   * `table-layout` attribute of table element\n   * `fixed` when header/columns are fixed, or using `column.ellipsis`\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout\n   * @version 1.5.0\n   */\n  tableLayout?: 'auto' | 'fixed' | string;\n\n  /**\n   * the render container of dropdowns in table\n   * @param triggerNode\n   * @version 1.5.0\n   */\n  getPopupContainer?: (triggerNode?: HTMLElement) => HTMLElement;\n\n  /**\n   * Data can be changed again before rendering.\n   * The default configuration of general user empty data.\n   * You can configured globally through [ConfigProvider](https://antdv.com/components/config-provider-cn/)\n   *\n   * @version 1.5.4\n   */\n  transformCellText?: Function;\n\n  /**\n   * Callback executed before editable cell submit value, not for row-editor\n   *\n   * The cell will not submit data while callback return false\n   */\n  beforeEditSubmit?: (data: { record: Recordable; index: number; key: string | number; value: any }) => Promise<any>;\n\n  /**\n   * Callback executed when pagination, filters or sorter is changed\n   * @param pagination\n   * @param filters\n   * @param sorter\n   * @param currentDataSource\n   */\n  onChange?: (pagination: any, filters: any, sorter: any, extra: any) => void;\n\n  /**\n   * Callback executed when the row expand icon is clicked\n   *\n   * @param expanded\n   * @param record\n   */\n  onExpand?: (expande: boolean, record: T) => void;\n\n  /**\n   * Callback executed when the expanded rows change\n   * @param expandedRows\n   */\n  onExpandedRowsChange?: (expandedRows: string[] | number[]) => void;\n\n  onColumnsChange?: (data: ColumnChangeParam[]) => void;\n}\n\nexport type CellFormat = string | ((text: string, record: Recordable, index: number) => string | number) | Map<string | number, any>;\n\n// @ts-ignore\nexport interface BasicColumn extends ColumnProps {\n  children?: BasicColumn[];\n  filters?: {\n    text: string;\n    value: string;\n    children?: unknown[] | (((props: Record<string, unknown>) => unknown[]) & (() => unknown[]) & (() => unknown[]));\n  }[];\n\n  //\n  flag?: 'INDEX' | 'DEFAULT' | 'CHECKBOX' | 'RADIO' | 'ACTION';\n  customTitle?: VueNode;\n\n  slots?: Recordable;\n\n  // Whether to hide the column by default, it can be displayed in the column configuration\n  defaultHidden?: boolean;\n\n  // Help text for table column header\n  helpMessage?: string | string[];\n\n  format?: CellFormat;\n\n  // Editable\n  edit?: boolean;\n  editRow?: boolean;\n  editable?: boolean;\n  editComponent?: ComponentType;\n  editComponentProps?: Recordable;\n  editRule?: boolean | ((text: string, record: Recordable) => Promise<string>);\n  editValueMap?: (value: any) => string;\n  onEditRow?: () => void;\n  // \u6743\u9650\u7F16\u7801\u63A7\u5236\u662F\u5426\u663E\u793A\n  auth?: RoleEnum | RoleEnum[] | string | string[];\n  // \u4E1A\u52A1\u63A7\u5236\u662F\u5426\u663E\u793A\n  ifShow?: boolean | ((column: BasicColumn) => boolean);\n}\n\nexport type ColumnChangeParam = {\n  dataIndex: string;\n  fixed: boolean | 'left' | 'right' | undefined;\n  visible: boolean;\n};\n\nexport interface InnerHandlers {\n  onColumnsChange: (data: ColumnChangeParam[]) => void;\n}\n", "import Pagination from 'ant-design-vue/lib/pagination';\nimport { VNodeChild } from 'vue';\n\ninterface PaginationRenderProps {\n  page: number;\n  type: 'page' | 'prev' | 'next';\n  originalElement: any;\n}\n\nexport declare class PaginationConfig extends Pagination {\n  position?: 'top' | 'bottom' | 'both';\n}\nexport interface PaginationProps {\n  /**\n   * total number of data items\n   * @default 0\n   * @type number\n   */\n  total?: number;\n\n  /**\n   * default initial page number\n   * @default 1\n   * @type number\n   */\n  defaultCurrent?: number;\n\n  /**\n   * current page number\n   * @type number\n   */\n  current?: number;\n\n  /**\n   * default number of data items per page\n   * @default 10\n   * @type number\n   */\n  defaultPageSize?: number;\n\n  /**\n   * number of data items per page\n   * @type number\n   */\n  pageSize?: number;\n\n  /**\n   * Whether to hide pager on single page\n   * @default false\n   * @type boolean\n   */\n  hideOnSinglePage?: boolean;\n\n  /**\n   * determine whether pageSize can be changed\n   * @default false\n   * @type boolean\n   */\n  showSizeChanger?: boolean;\n\n  /**\n   * specify the sizeChanger options\n   * @default ['10', '20', '30', '40']\n   * @type string[]\n   */\n  pageSizeOptions?: string[];\n\n  /**\n   * determine whether you can jump to pages directly\n   * @default false\n   * @type boolean\n   */\n  showQuickJumper?: boolean | object;\n\n  /**\n   * to display the total number and range\n   * @type Function\n   */\n  showTotal?: (total: number, range: [number, number]) => any;\n\n  /**\n   * specify the size of Pagination, can be set to small\n   * @default ''\n   * @type string\n   */\n  size?: string;\n\n  /**\n   * whether to setting simple mode\n   * @type boolean\n   */\n  simple?: boolean;\n\n  /**\n   * to customize item innerHTML\n   * @type Function\n   */\n  itemRender?: (props: PaginationRenderProps) => VNodeChild | JSX.Element;\n}\n", "import { ButtonProps } from 'ant-design-vue/es/button/buttonTypes';\nimport { TooltipProps } from 'ant-design-vue/es/tooltip/Tooltip';\nimport { RoleEnum } from '/@/enums/roleEnum';\nexport interface ActionItem extends ButtonProps {\n  onClick?: Fn;\n  label?: string;\n  color?: 'success' | 'error' | 'warning';\n  icon?: string;\n  popConfirm?: PopConfirm;\n  disabled?: boolean;\n  divider?: boolean;\n  // \u6743\u9650\u7F16\u7801\u63A7\u5236\u662F\u5426\u663E\u793A\n  auth?: RoleEnum | RoleEnum[] | string | string[];\n  // \u4E1A\u52A1\u63A7\u5236\u662F\u5426\u663E\u793A\n  ifShow?: boolean | ((action: ActionItem) => boolean);\n  tooltip?: string | TooltipProps;\n  // \u81EA\u5B9A\u4E49\u7C7B\u540D\n  class?: string | Record<string, boolean> | any[];\n}\n\nexport interface PopConfirm {\n  title: string;\n  okText?: string;\n  cancelText?: string;\n  confirm: Fn;\n  cancel?: Fn;\n  icon?: string;\n  placement?: string;\n}\n"],
  "mappings": "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",
  "names": ["default"]
}
