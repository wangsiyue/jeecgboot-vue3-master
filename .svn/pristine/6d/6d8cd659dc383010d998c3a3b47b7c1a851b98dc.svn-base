{
  "version": 3,
  "sources": ["../../../src/hooks/web/useMessage.ts"],
  "sourcesContent": ["import type { ModalFunc, ModalFuncProps } from 'ant-design-vue/lib/modal/Modal';\n\nimport { Modal, message as Message, notification } from 'ant-design-vue';\nimport { InfoCircleFilled, CheckCircleFilled, CloseCircleFilled } from '@ant-design/icons-vue';\n\nimport { NotificationArgsProps, ConfigProps } from 'ant-design-vue/lib/notification';\nimport { useI18n } from './useI18n';\nimport { isString } from '/@/utils/is';\nimport { h } from 'vue';\n\nexport interface NotifyApi {\n  info(config: NotificationArgsProps): void;\n  success(config: NotificationArgsProps): void;\n  error(config: NotificationArgsProps): void;\n  warn(config: NotificationArgsProps): void;\n  warning(config: NotificationArgsProps): void;\n  open(args: NotificationArgsProps): void;\n  close(key: String): void;\n  config(options: ConfigProps): void;\n  destroy(): void;\n}\n\nexport declare type NotificationPlacement = 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';\nexport declare type IconType = 'success' | 'info' | 'error' | 'warning';\nexport interface ModalOptionsEx extends Omit<ModalFuncProps, 'iconType'> {\n  iconType: 'warning' | 'success' | 'error' | 'info';\n}\nexport type ModalOptionsPartial = Partial<ModalOptionsEx> & Pick<ModalOptionsEx, 'content'>;\n\ninterface ConfirmOptions {\n  info: ModalFunc;\n  success: ModalFunc;\n  error: ModalFunc;\n  warn: ModalFunc;\n  warning: ModalFunc;\n}\n\nfunction getIcon(iconType: string) {\n  try {\n    if (iconType === 'warning') {\n      return  h(InfoCircleFilled,{\"class\":\"modal-icon-warning\"})\n    } else if (iconType === 'success') {\n      return h(CheckCircleFilled,{\"class\": \"modal-icon-success\"});\n    } else if (iconType === 'info') {\n      return h(InfoCircleFilled,{\"class\": \"modal-icon-info\"});\n    } else {\n      return h(CloseCircleFilled,{\"class\":\"modal-icon-error\"});\n    }\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction renderContent({ content }: Pick<ModalOptionsEx, 'content'>) {\n  try {\n    if (isString(content)) {\n      return h('div', h('div', {'innerHTML':content as string}));\n    } else {\n      return content;\n    }\n  } catch (e) {\n    console.log(e);\n    return content;\n  }\n}\n\n/**\n * @description: Create confirmation box\n */\nfunction createConfirm(options: ModalOptionsEx): ReturnType<ModalFunc> {\n  const iconType = options.iconType || 'warning';\n  Reflect.deleteProperty(options, 'iconType');\n  const opt: ModalFuncProps = {\n    centered: true,\n    icon: getIcon(iconType),\n    ...options,\n    content: renderContent(options),\n  };\n  return Modal.confirm(opt);\n}\n\nconst getBaseOptions = () => {\n  const { t } = useI18n();\n  return {\n    okText: t('common.okText'),\n    centered: true,\n  };\n};\n\nfunction createModalOptions(options: ModalOptionsPartial, icon: string): ModalOptionsPartial {\n  return {\n    ...getBaseOptions(),\n    ...options,\n    content: renderContent(options),\n    icon: getIcon(icon),\n  };\n}\n\nfunction createSuccessModal(options: ModalOptionsPartial) {\n  return Modal.success(createModalOptions(options, 'success'));\n}\n\nfunction createErrorModal(options: ModalOptionsPartial) {\n  return Modal.error(createModalOptions(options, 'close'));\n}\n\nfunction createInfoModal(options: ModalOptionsPartial) {\n  return Modal.info(createModalOptions(options, 'info'));\n}\n\nfunction createWarningModal(options: ModalOptionsPartial) {\n  return Modal.warning(createModalOptions(options, 'warning'));\n}\n\nnotification.config({\n  placement: 'topRight',\n  duration: 3,\n});\n\n/**\n * @description: message\n */\nexport function useMessage() {\n  return {\n    createMessage: Message,\n    notification: notification as NotifyApi,\n    createConfirm: createConfirm,\n    createSuccessModal,\n    createErrorModal,\n    createInfoModal,\n    createWarningModal,\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAqCA,SAAS,QAAQ,UAAkB;AACjC,MAAI;AACF,QAAI,aAAa,WAAW;AAC1B,aAAQ,EAAE,0BAAiB,EAAC,SAAQ,qBAAoB,CAAC;AAAA,IAC3D,WAAW,aAAa,WAAW;AACjC,aAAO,EAAE,2BAAkB,EAAC,SAAS,qBAAoB,CAAC;AAAA,IAC5D,WAAW,aAAa,QAAQ;AAC9B,aAAO,EAAE,0BAAiB,EAAC,SAAS,kBAAiB,CAAC;AAAA,IACxD,OAAO;AACL,aAAO,EAAE,2BAAkB,EAAC,SAAQ,mBAAkB,CAAC;AAAA,IACzD;AAAA,EACF,SAAS,GAAP;AACA,YAAQ,IAAI,CAAC;AAAA,EACf;AACF;AAEA,SAAS,cAAc,EAAE,QAAQ,GAAoC;AACnE,MAAI;AACF,QAAI,SAAS,OAAO,GAAG;AACrB,aAAO,EAAE,OAAO,EAAE,OAAO,EAAC,aAAY,QAAiB,CAAC,CAAC;AAAA,IAC3D,OAAO;AACL,aAAO;AAAA,IACT;AAAA,EACF,SAAS,GAAP;AACA,YAAQ,IAAI,CAAC;AACb,WAAO;AAAA,EACT;AACF;AAKA,SAAS,cAAc,SAAgD;AACrE,QAAM,WAAW,QAAQ,YAAY;AACrC,UAAQ,eAAe,SAAS,UAAU;AAC1C,QAAM,MAAsB;AAAA,IAC1B,UAAU;AAAA,IACV,MAAM,QAAQ,QAAQ;AAAA,IACtB,GAAG;AAAA,IACH,SAAS,cAAc,OAAO;AAAA,EAChC;AACA,SAAO,cAAM,QAAQ,GAAG;AAC1B;AAEA,IAAM,iBAAiB,MAAM;AAC3B,QAAM,EAAE,EAAE,IAAI,QAAQ;AACtB,SAAO;AAAA,IACL,QAAQ,EAAE,eAAe;AAAA,IACzB,UAAU;AAAA,EACZ;AACF;AAEA,SAAS,mBAAmB,SAA8B,MAAmC;AAC3F,SAAO;AAAA,IACL,GAAG,eAAe;AAAA,IAClB,GAAG;AAAA,IACH,SAAS,cAAc,OAAO;AAAA,IAC9B,MAAM,QAAQ,IAAI;AAAA,EACpB;AACF;AAEA,SAAS,mBAAmB,SAA8B;AACxD,SAAO,cAAM,QAAQ,mBAAmB,SAAS,SAAS,CAAC;AAC7D;AAEA,SAAS,iBAAiB,SAA8B;AACtD,SAAO,cAAM,MAAM,mBAAmB,SAAS,OAAO,CAAC;AACzD;AAEA,SAAS,gBAAgB,SAA8B;AACrD,SAAO,cAAM,KAAK,mBAAmB,SAAS,MAAM,CAAC;AACvD;AAEA,SAAS,mBAAmB,SAA8B;AACxD,SAAO,cAAM,QAAQ,mBAAmB,SAAS,SAAS,CAAC;AAC7D;AAEA,qBAAa,OAAO;AAAA,EAClB,WAAW;AAAA,EACX,UAAU;AACZ,CAAC;AAKM,SAAS,aAAa;AAC3B,SAAO;AAAA,IACL,eAAe;AAAA,IACf,cAAc;AAAA,IACd;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;",
  "names": []
}
