import {
  error
} from "./chunk-LZQJUVGN.js";
import {
  withInstall
} from "./chunk-GH3CBHGS.js";
import {
  isProdMode
} from "./chunk-GE6AQLDJ.js";
import {
  isFunction
} from "./chunk-RX5I5ULI.js";
import {
  tryOnUnmounted
} from "./chunk-WTYZJWFF.js";
import {
  isEqual_default
} from "./chunk-L26JVTZY.js";
import {
  computed,
  getCurrentInstance,
  nextTick,
  onUnmounted,
  reactive,
  ref,
  toRaw,
  unref,
  watchEffect
} from "./chunk-JQQZ4WSS.js";
import {
  init_define_APP_INFO
} from "./chunk-ET6QIZHT.js";

// src/components/Modal/src/hooks/useModal.ts
init_define_APP_INFO();
var dataTransfer = reactive({});
var visibleData = reactive({});
function useModal() {
  const modal = ref(null);
  const loaded = ref(false);
  const uid = ref("");
  function register(modalMethod, uuid) {
    if (!getCurrentInstance()) {
      throw new Error("useModal() can only be used inside setup() or functional components!");
    }
    uid.value = uuid;
    isProdMode() && onUnmounted(() => {
      modal.value = null;
      loaded.value = false;
      dataTransfer[unref(uid)] = null;
    });
    if (unref(loaded) && isProdMode() && modalMethod === unref(modal))
      return;
    modal.value = modalMethod;
    loaded.value = true;
    modalMethod.emitVisible = (visible, uid2) => {
      visibleData[uid2] = visible;
    };
  }
  const getInstance = () => {
    const instance = unref(modal);
    if (!instance) {
      error("useModal instance is undefined!");
    }
    return instance;
  };
  const methods = {
    setModalProps: (props) => {
      getInstance()?.setModalProps(props);
    },
    getVisible: computed(() => {
      return visibleData[~~unref(uid)];
    }),
    redoModalHeight: () => {
      getInstance()?.redoModalHeight?.();
    },
    openModal: (visible = true, data, openOnSet = true) => {
      getInstance()?.setModalProps({
        visible
      });
      if (!data)
        return;
      const id = unref(uid);
      if (openOnSet) {
        dataTransfer[id] = null;
        dataTransfer[id] = toRaw(data);
        return;
      }
      const equal = isEqual_default(toRaw(dataTransfer[id]), toRaw(data));
      if (!equal) {
        dataTransfer[id] = toRaw(data);
      }
    },
    closeModal: () => {
      getInstance()?.setModalProps({ visible: false });
    }
  };
  return [register, methods];
}
var useModalInner = (callbackFn) => {
  const modalInstanceRef = ref(null);
  const currentInstance = getCurrentInstance();
  const uidRef = ref("");
  const getInstance = () => {
    const instance = unref(modalInstanceRef);
    if (!instance) {
      error("useModalInner instance is undefined!");
    }
    return instance;
  };
  const register = (modalInstance, uuid) => {
    isProdMode() && tryOnUnmounted(() => {
      modalInstanceRef.value = null;
    });
    uidRef.value = uuid;
    modalInstanceRef.value = modalInstance;
    currentInstance?.emit("register", modalInstance, uuid);
  };
  watchEffect(() => {
    const data = dataTransfer[unref(uidRef)];
    if (!data)
      return;
    if (!callbackFn || !isFunction(callbackFn))
      return;
    nextTick(() => {
      callbackFn(data);
    });
  });
  return [
    register,
    {
      changeLoading: (loading = true) => {
        getInstance()?.setModalProps({ loading });
      },
      getVisible: computed(() => {
        return visibleData[~~unref(uidRef)];
      }),
      changeOkLoading: (loading = true) => {
        getInstance()?.setModalProps({ confirmLoading: loading });
      },
      closeModal: () => {
        getInstance()?.setModalProps({ visible: false });
      },
      setModalProps: (props) => {
        getInstance()?.setModalProps(props);
      },
      redoModalHeight: () => {
        const callRedo = getInstance()?.redoModalHeight;
        callRedo && callRedo();
      }
    }
  ];
};

// src/components/Modal/index.ts
init_define_APP_INFO();
import "D:/jeecgboot-vue3-master/src/components/Modal/src/index.less";
import basicModal from "D:/jeecgboot-vue3-master/src/components/Modal/src/BasicModal.vue";

// src/components/Modal/src/hooks/useModalContext.ts
init_define_APP_INFO();
var key = Symbol();

// src/components/Modal/src/typing.ts
init_define_APP_INFO();

// src/components/Modal/index.ts
var BasicModal = withInstall(basicModal);

export {
  useModal,
  useModalInner,
  BasicModal
};
//# sourceMappingURL=chunk-MHXJV5SW.js.map
