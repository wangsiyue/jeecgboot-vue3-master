{
  "version": 3,
  "sources": ["../../../src/utils/dict/index.ts", "../../../src/utils/dict/JDictSelectUtil.js"],
  "sourcesContent": ["import { getAuthCache } from '/@/utils/auth';\nimport { DB_DICT_DATA_KEY } from '/@/enums/cacheEnum';\nimport { defHttp } from '/@/utils/http/axios';\n\n/**\n * \u4ECE\u7F13\u5B58\u4E2D\u83B7\u53D6\u5B57\u5178\u914D\u7F6E\n * @param code\n */\nexport const getDictItemsByCode = (code) => {\n  if (getAuthCache(DB_DICT_DATA_KEY) && getAuthCache(DB_DICT_DATA_KEY)[code]) {\n    return getAuthCache(DB_DICT_DATA_KEY)[code];\n  }\n};\n/**\n * \u83B7\u53D6\u5B57\u5178\u6570\u7EC4\n * @param dictCode \u5B57\u5178Code\n * @return List<Map>\n */\nexport const initDictOptions = (code) => {\n  //1.\u4F18\u5148\u4ECE\u7F13\u5B58\u4E2D\u8BFB\u53D6\u5B57\u5178\u914D\u7F6E\n  if (getDictItemsByCode(code)) {\n    return new Promise((resolve, reject) => {\n      resolve(getDictItemsByCode(code));\n    });\n  }\n  //2.\u83B7\u53D6\u5B57\u5178\u6570\u7EC4\n  //update-begin-author:taoyan date:2022-6-21 for: \u5B57\u5178\u6570\u636E\u8BF7\u6C42\u524D\u5C06\u53C2\u6570\u7F16\u7801\u5904\u7406\uFF0C\u4F46\u662F\u4E0D\u80FD\u76F4\u63A5\u7F16\u7801\uFF0C\u56E0\u4E3A\u53EF\u80FD\u4E4B\u524D\u5DF2\u7ECF\u7F16\u7801\u8FC7\u4E86\n  if (code.indexOf(',') > 0 && code.indexOf(' ') > 0) {\n    // \u7F16\u7801\u540E\u7C7B\u4F3Csys_user%20where%20username%20like%20xxx' \u662F\u4E0D\u5305\u542B\u7A7A\u683C\u7684,\u8FD9\u91CC\u5224\u65AD\u5982\u679C\u6709\u7A7A\u683C\u548C\u9017\u53F7\u8BF4\u660E\u9700\u8981\u7F16\u7801\u5904\u7406\n    code = encodeURI(code);\n  }\n  //update-end-author:taoyan date:2022-6-21 for: \u5B57\u5178\u6570\u636E\u8BF7\u6C42\u524D\u5C06\u53C2\u6570\u7F16\u7801\u5904\u7406\uFF0C\u4F46\u662F\u4E0D\u80FD\u76F4\u63A5\u7F16\u7801\uFF0C\u56E0\u4E3A\u53EF\u80FD\u4E4B\u524D\u5DF2\u7ECF\u7F16\u7801\u8FC7\u4E86\n  return defHttp.get({ url: `/sys/dict/getDictItems/${code}` });\n};\n/**\n * \u83B7\u53D6\u5B57\u5178\u6570\u7EC4\n * @param code \u5B57\u5178Code\n * @param params \u67E5\u8BE2\u53C2\u6570\n * @param options \u67E5\u8BE2\u914D\u7F6E\n * @return List<Map>\n */\nexport const ajaxGetDictItems = (code, params, options?) => defHttp.get({ url: `/sys/dict/getDictItems/${code}`, params }, options);\n", "/**\n * \u5B57\u5178 util\n * author: scott\n * date: 20190109\n */\n\nimport { ajaxGetDictItems, getDictItemsByCode } from './index';\n\n/**\n * \u83B7\u53D6\u5B57\u5178\u6570\u7EC4\n * \u3010\u76EE\u524D\u4EC5\u8868\u5355\u8BBE\u8BA1\u5668\u9875\u9762\u4F7F\u7528\u8BE5\u65B9\u6CD5\u3011\n * @param dictCode \u5B57\u5178Code\n * @param isTransformResponse \u662F\u5426\u8F6C\u6362\u8FD4\u56DE\u7ED3\u679C\n * @return List<Map>\n */\nexport async function initDictOptions(dictCode, isTransformResponse = true) {\n  if (!dictCode) {\n    return '\u5B57\u5178Code\u4E0D\u80FD\u4E3A\u7A7A!';\n  }\n  //\u4F18\u5148\u4ECE\u7F13\u5B58\u4E2D\u8BFB\u53D6\u5B57\u5178\u914D\u7F6E\n  if (getDictItemsByCode(dictCode)) {\n    let res = {};\n    res.result = getDictItemsByCode(dictCode);\n    res.success = true;\n    if (isTransformResponse) {\n      return res.result;\n    } else {\n      return res;\n    }\n  }\n  //\u83B7\u53D6\u5B57\u5178\u6570\u7EC4\n  return await ajaxGetDictItems(dictCode, {}, { isTransformResponse });\n}\n\n/**\n * \u5B57\u5178\u503C\u66FF\u6362\u6587\u672C\u901A\u7528\u65B9\u6CD5\n * @param dictOptions  \u5B57\u5178\u6570\u7EC4\n * @param text  \u5B57\u5178\u503C\n * @return String\n */\nexport function filterDictText(dictOptions, text) {\n  // --update-begin----author:sunjianlei---date:20200323------for: \u5B57\u5178\u7FFB\u8BD1 text \u5141\u8BB8\u9017\u53F7\u5206\u9694 ---\n  if (text != null && Array.isArray(dictOptions)) {\n    let result = [];\n    // \u5141\u8BB8\u591A\u4E2A\u9017\u53F7\u5206\u9694\uFF0C\u5141\u8BB8\u4F20\u6570\u7EC4\u5BF9\u8C61\n    let splitText;\n    if (Array.isArray(text)) {\n      splitText = text;\n    } else {\n      splitText = text.toString().trim().split(',');\n    }\n    for (let txt of splitText) {\n      let dictText = txt;\n      for (let dictItem of dictOptions) {\n        if (txt.toString() === dictItem.value.toString()) {\n          dictText = dictItem.text || dictItem.title || dictItem.label;\n          break;\n        }\n      }\n      result.push(dictText);\n    }\n    return result.join(',');\n  }\n  return text;\n  // --update-end----author:sunjianlei---date:20200323------for: \u5B57\u5178\u7FFB\u8BD1 text \u5141\u8BB8\u9017\u53F7\u5206\u9694 ---\n}\n\n/**\n * \u5B57\u5178\u503C\u66FF\u6362\u6587\u672C\u901A\u7528\u65B9\u6CD5(\u591A\u9009)\n * @param dictOptions  \u5B57\u5178\u6570\u7EC4\n * @param text  \u5B57\u5178\u503C\n * @return String\n */\nexport function filterMultiDictText(dictOptions, text) {\n  //js \u201C!text\u201D \u8BA4\u4E3A0\u4E3A\u7A7A\uFF0C\u6240\u4EE5\u505A\u63D0\u524D\u5904\u7406\n  if (text === 0 || text === '0') {\n    if (dictOptions) {\n      for (let dictItem of dictOptions) {\n        if (text == dictItem.value) {\n          return dictItem.text;\n        }\n      }\n    }\n  }\n\n  if (!text || text == 'undefined' || text == 'null' || !dictOptions || dictOptions.length == 0) {\n    return '';\n  }\n  let re = '';\n  text = text.toString();\n  let arr = text.split(',');\n  dictOptions.forEach(function (option) {\n    if (option) {\n      for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === option.value) {\n          re += option.text + ',';\n          break;\n        }\n      }\n    }\n  });\n  if (re == '') {\n    return text;\n  }\n  return re.substring(0, re.length - 1);\n}\n\n/**\n * \u7FFB\u8BD1\u5B57\u6BB5\u503C\u5BF9\u5E94\u7684\u6587\u672C\n * @param children\n * @returns string\n */\nexport function filterDictTextByCache(dictCode, key) {\n  if (key == null || key.length == 0) {\n    return;\n  }\n  if (!dictCode) {\n    return '\u5B57\u5178Code\u4E0D\u80FD\u4E3A\u7A7A!';\n  }\n  //\u4F18\u5148\u4ECE\u7F13\u5B58\u4E2D\u8BFB\u53D6\u5B57\u5178\u914D\u7F6E\n  if (getDictItemsByCode(dictCode)) {\n    let item = getDictItemsByCode(dictCode).filter((t) => t['value'] == key);\n    if (item && item.length > 0) {\n      return item[0]['text'];\n    }\n  }\n}\n\n/** \u901A\u8FC7code\u83B7\u53D6\u5B57\u5178\u6570\u7EC4 */\nexport async function getDictItems(dictCode, params) {\n  //\u4F18\u5148\u4ECE\u7F13\u5B58\u4E2D\u8BFB\u53D6\u5B57\u5178\u914D\u7F6E\n  if (getDictItemsByCode(dictCode)) {\n    let desformDictItems = getDictItemsByCode(dictCode).map((item) => ({\n      ...item,\n      label: item.text,\n    }));\n    return desformDictItems;\n  }\n\n  //\u7F13\u5B58\u4E2D\u6CA1\u6709\uFF0C\u5C31\u8BF7\u6C42\u540E\u53F0\n  return await ajaxGetDictItems(dictCode, params)\n    .then(({ success, result }) => {\n      if (success) {\n        let res = result.map((item) => ({ ...item, label: item.text }));\n        console.log('------- \u4ECEDB\u4E2D\u83B7\u53D6\u5230\u4E86\u5B57\u5178-------dictCode : ', dictCode, res);\n        return Promise.resolve(res);\n      } else {\n        console.error('getDictItems error: : ', res);\n        return Promise.resolve([]);\n      }\n    })\n    .catch((res) => {\n      console.error('getDictItems error: ', res);\n      return Promise.resolve([]);\n    });\n}\n"],
  "mappings": ";;;;;;;;;;;AAAA;AAQO,IAAM,qBAAqB,CAAC,SAAS;AAC1C,MAAI,aAAa,gBAAgB,KAAK,aAAa,gBAAgB,EAAE,OAAO;AAC1E,WAAO,aAAa,gBAAgB,EAAE;AAAA,EACxC;AACF;;;ACZA;AAwCO,SAAS,eAAe,aAAa,MAAM;AAEhD,MAAI,QAAQ,QAAQ,MAAM,QAAQ,WAAW,GAAG;AAC9C,QAAI,SAAS,CAAC;AAEd,QAAI;AACJ,QAAI,MAAM,QAAQ,IAAI,GAAG;AACvB,kBAAY;AAAA,IACd,OAAO;AACL,kBAAY,KAAK,SAAS,EAAE,KAAK,EAAE,MAAM,GAAG;AAAA,IAC9C;AACA,aAAS,OAAO,WAAW;AACzB,UAAI,WAAW;AACf,eAAS,YAAY,aAAa;AAChC,YAAI,IAAI,SAAS,MAAM,SAAS,MAAM,SAAS,GAAG;AAChD,qBAAW,SAAS,QAAQ,SAAS,SAAS,SAAS;AACvD;AAAA,QACF;AAAA,MACF;AACA,aAAO,KAAK,QAAQ;AAAA,IACtB;AACA,WAAO,OAAO,KAAK,GAAG;AAAA,EACxB;AACA,SAAO;AAET;AAQO,SAAS,oBAAoB,aAAa,MAAM;AAErD,MAAI,SAAS,KAAK,SAAS,KAAK;AAC9B,QAAI,aAAa;AACf,eAAS,YAAY,aAAa;AAChC,YAAI,QAAQ,SAAS,OAAO;AAC1B,iBAAO,SAAS;AAAA,QAClB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,MAAI,CAAC,QAAQ,QAAQ,eAAe,QAAQ,UAAU,CAAC,eAAe,YAAY,UAAU,GAAG;AAC7F,WAAO;AAAA,EACT;AACA,MAAI,KAAK;AACT,SAAO,KAAK,SAAS;AACrB,MAAI,MAAM,KAAK,MAAM,GAAG;AACxB,cAAY,QAAQ,SAAU,QAAQ;AACpC,QAAI,QAAQ;AACV,eAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACnC,YAAI,IAAI,OAAO,OAAO,OAAO;AAC3B,gBAAM,OAAO,OAAO;AACpB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF,CAAC;AACD,MAAI,MAAM,IAAI;AACZ,WAAO;AAAA,EACT;AACA,SAAO,GAAG,UAAU,GAAG,GAAG,SAAS,CAAC;AACtC;",
  "names": []
}
