{
  "version": 3,
  "sources": ["../../../src/hooks/core/useContext.ts"],
  "sourcesContent": ["import {\n  InjectionKey,\n  provide,\n  inject,\n  reactive,\n  readonly as defineReadonly,\n  // defineComponent,\n  UnwrapRef,\n} from 'vue';\n\nexport interface CreateContextOptions {\n  readonly?: boolean;\n  createProvider?: boolean;\n  native?: boolean;\n}\n\ntype ShallowUnwrap<T> = {\n  [P in keyof T]: UnwrapRef<T[P]>;\n};\n\nexport function createContext<T>(context: any, key: InjectionKey<T> = Symbol(), options: CreateContextOptions = {}) {\n  const { readonly = true, createProvider = false, native = false } = options;\n\n  const state = reactive(context);\n  const provideData = readonly ? defineReadonly(state) : state;\n  !createProvider && provide(key, native ? context : provideData);\n\n  return {\n    state,\n  };\n}\n\nexport function useContext<T>(key: InjectionKey<T>, native?: boolean): T;\nexport function useContext<T>(key: InjectionKey<T>, defaultValue?: any, native?: boolean): T;\n\nexport function useContext<T>(key: InjectionKey<T> = Symbol(), defaultValue?: any): ShallowUnwrap<T> {\n  return inject(key, defaultValue || {});\n}\n"],
  "mappings": ";;;;;;;;AAAA;AAmCO,SAAS,WAAc,MAAuB,OAAO,GAAG,cAAsC;AACnG,SAAO,OAAO,KAAK,gBAAgB,CAAC,CAAC;AACvC;",
  "names": []
}
