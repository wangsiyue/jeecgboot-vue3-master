import {
  isNullOrUnDef
} from "./chunk-RX5I5ULI.js";
import {
  require_vue_i18n_cjs
} from "./chunk-KVJ6VO5A.js";
import {
  createPinia,
  defineStore
} from "./chunk-YTTBVVBT.js";
import {
  require_enc_utf8
} from "./chunk-SFFFXB4Y.js";
import {
  require_mode_ecb
} from "./chunk-4VBCR2UY.js";
import {
  require_pad_pkcs7
} from "./chunk-LU447FN7.js";
import {
  require_aes
} from "./chunk-PCZNDPKY.js";
import {
  require_md5
} from "./chunk-RNTI5KWT.js";
import {
  require_enc_base64
} from "./chunk-6AC3D6AH.js";
import {
  __export,
  __publicField,
  __toESM,
  init_define_APP_INFO
} from "./chunk-ET6QIZHT.js";

// src/store/index.ts
init_define_APP_INFO();
var store = createPinia();

// src/utils/cache/index.ts
var cache_exports = {};
__export(cache_exports, {
  WebStorage: () => WebStorage,
  createLocalStorage: () => createLocalStorage,
  createSessionStorage: () => createSessionStorage,
  createStorage: () => createStorage2,
  default: () => cache_default
});
init_define_APP_INFO();

// src/utils/env.ts
init_define_APP_INFO();

// package.json
var package_default = {
  name: "jeecgboot-vue3",
  version: "3.4.2",
  author: {
    name: "jeecg",
    email: "jeecgos@163.com",
    url: "https://github.com/jeecgboot/jeecgboot-vue3"
  },
  scripts: {
    bootstrap: "yarn install",
    serve: "npm run dev",
    dev: "vite",
    "clean:cache": "rimraf node_modules/.cache/ && rimraf node_modules/.vite",
    build: "cross-env NODE_ENV=production NODE_OPTIONS=--max-old-space-size=8192 vite build && esno ./build /script/postBuild.ts",
    "build:test": "cross-env vite build --mode test && esno ./build/script/postBuild.ts",
    "build:no-cache": "yarn clean:cache && npm run build",
    report: "cross-env REPORT=true npm run build",
    "type:check": "vue-tsc --noEmit --skipLibCheck",
    preview: "npm run build && vite preview",
    "preview:dist": "vite preview",
    log: "conventional-changelog -p angular -i CHANGELOG.md -s",
    "clean:lib": "rimraf node_modules",
    "lint:eslint": 'eslint --cache --max-warnings 0  "{src,mock}/**/*.{vue,ts,tsx}" --fix',
    "lint:prettier": 'prettier --write  "src/**/*.{js,json,tsx,css,less,scss,vue,html,md}"',
    "lint:stylelint": 'stylelint --cache --fix "**/*.{vue,less,postcss,css,scss}" --cache --cache-location node_modules/.cache/stylelint/',
    "lint:lint-staged": "lint-staged -c ./.husky/lintstagedrc.js",
    "lint:pretty": "pretty-quick --staged",
    "test:unit": "jest",
    "test:unit-coverage": "jest --coverage",
    "test:gzip": "http-server dist --cors --gzip -c-1",
    "test:br": "http-server dist --cors --brotli -c-1",
    reinstall: "rimraf yarn.lock && rimraf package.lock.json && rimraf node_modules && npm run bootstrap",
    prepare: "husky install",
    "gen:icon": "esno ./build/generate/icon/index.ts"
  },
  dependencies: {
    "@jeecg/online": "1.0.1",
    "@iconify/iconify": "^2.2.1",
    "@ant-design/colors": "^6.0.0",
    "@ant-design/icons-vue": "^6.1.0",
    "@logicflow/core": "^1.1.13",
    "@logicflow/extension": "^1.1.13",
    "@vue/shared": "^3.2.33",
    "@vue/runtime-core": "^3.2.33",
    "@vueuse/shared": "^8.3.0",
    "@vueuse/core": "^8.3.0",
    "@zxcvbn-ts/core": "^2.0.1",
    "ant-design-vue": "3.2.12",
    axios: "^0.26.1",
    "china-area-data": "^5.0.1",
    clipboard: "^2.0.8",
    codemirror: "^5.65.3",
    "cron-parser": "^3.5.0",
    cropperjs: "^1.5.12",
    "crypto-js": "^4.1.1",
    dayjs: "^1.11.1",
    "dom-align": "^1.12.2",
    echarts: "^5.3.2",
    "emoji-mart-vue-fast": "^11.1.1",
    "enquire.js": "^2.1.6",
    "intro.js": "^5.1.0",
    "js-cookie": "^2.2.1",
    "lodash-es": "^4.17.21",
    "lodash.get": "^4.4.2",
    "lodash.pick": "^4.4.0",
    md5: "^2.3.0",
    mockjs: "^1.1.0",
    nprogress: "^0.2.0",
    "path-to-regexp": "^6.2.0",
    pinia: "2.0.12",
    "print-js": "^1.6.0",
    qs: "^6.10.3",
    qrcode: "^1.5.0",
    qrcodejs2: "0.0.2",
    "resize-observer-polyfill": "^1.5.1",
    showdown: "^2.1.0",
    sortablejs: "^1.15.0",
    tinymce: "^5.10.3",
    vditor: "^3.8.13",
    vue: "^3.2.33",
    "vue-cropper": "^0.5.6",
    "vue-cropperjs": "^5.0.0",
    "vue-i18n": "^9.1.9",
    "vue-infinite-scroll": "^2.0.2",
    "vue-print-nb-jeecg": "^1.0.10",
    "vue-router": "^4.0.14",
    "vue-types": "^4.1.1",
    vuedraggable: "^4.1.0",
    "vxe-table": "4.1.0",
    "vxe-table-plugin-antd": "^3.0.5",
    "xe-utils": "^3.3.1",
    "vue-json-pretty": "^2.0.6",
    xss: "^1.0.13"
  },
  devDependencies: {
    "@commitlint/cli": "^16.2.3",
    "@commitlint/config-conventional": "^16.2.1",
    "@iconify/json": "^2.1.30",
    "@purge-icons/generated": "^0.8.1",
    "@types/codemirror": "^5.60.5",
    "@types/crypto-js": "^4.1.1",
    "@types/fs-extra": "^9.0.13",
    "@types/inquirer": "^8.2.1",
    "@types/intro.js": "^3.0.2",
    "@types/jest": "^27.0.2",
    "@types/lodash-es": "^4.17.6",
    "@types/mockjs": "^1.0.6",
    "@types/node": "^17.0.25",
    "@types/nprogress": "^0.2.0",
    "@types/qrcode": "^1.4.2",
    "@types/qs": "^6.9.7",
    "@types/showdown": "^1.9.4",
    "@types/sortablejs": "^1.10.7",
    "@typescript-eslint/eslint-plugin": "^5.20.0",
    "@typescript-eslint/parser": "^5.20.0",
    "@vitejs/plugin-legacy": "^1.8.1",
    "@vitejs/plugin-vue": "^2.3.1",
    "@vitejs/plugin-vue-jsx": "^1.3.10",
    "@vue/compiler-sfc": "^3.2.33",
    "@vue/test-utils": "^2.0.0-rc.21",
    autoprefixer: "^10.4.4",
    commitizen: "^4.2.4",
    "conventional-changelog-cli": "^2.2.2",
    "cross-env": "^7.0.3",
    "cz-git": "^1.3.9",
    czg: "^1.3.9",
    dotenv: "^16.0.0",
    eslint: "^8.13.0",
    "eslint-config-prettier": "^8.5.0",
    "eslint-define-config": "^1.1.1",
    "eslint-plugin-jest": "^25.2.2",
    "eslint-plugin-prettier": "^4.0.0",
    "eslint-plugin-vue": "^8.6.0",
    esno: "^0.14.1",
    "fs-extra": "^10.1.0",
    "http-server": "^14.0.0",
    husky: "^7.0.4",
    inquirer: "^8.2.2",
    "is-ci": "^3.0.0",
    jest: "^27.3.1",
    less: "^4.1.2",
    "lint-staged": "12.3.7",
    "npm-run-all": "^4.1.5",
    picocolors: "^1.0.0",
    postcss: "^8.4.12",
    "postcss-html": "^1.4.1",
    "postcss-less": "^6.0.0",
    prettier: "^2.6.2",
    "pretty-quick": "^3.1.1",
    rimraf: "^3.0.2",
    rollup: "^2.70.2",
    "rollup-plugin-visualizer": "^5.6.0",
    stylelint: "^14.7.1",
    "stylelint-config-prettier": "^9.0.3",
    "stylelint-config-recommended": "^7.0.0",
    "stylelint-config-recommended-vue": "^1.4.0",
    "stylelint-config-standard": "^25.0.0",
    "stylelint-order": "^5.0.0",
    "ts-jest": "^27.0.7",
    "ts-node": "^10.7.0",
    typescript: "^4.6.3",
    vite: "^2.9.5",
    "vite-plugin-compression": "^0.5.1",
    "vite-plugin-html": "^3.2.0",
    "vite-plugin-imagemin": "^0.6.1",
    "vite-plugin-mkcert": "^1.6.0",
    "vite-plugin-mock": "^2.9.6",
    "vite-plugin-optimize-persist": "^0.1.2",
    "vite-plugin-package-config": "^0.1.1",
    "vite-plugin-purge-icons": "^0.8.1",
    "vite-plugin-pwa": "^0.11.13",
    "vite-plugin-style-import": "^2.0.0",
    "vite-plugin-svg-icons": "^2.0.1",
    "vite-plugin-theme": "^0.8.6",
    "vite-plugin-vue-setup-extend": "^0.4.0",
    "vite-plugin-windicss": "^1.8.4",
    "vue-eslint-parser": "^8.3.0",
    "vue-tsc": "^0.33.9"
  },
  resolutions: {
    "//": "Used to install imagemin dependencies, because imagemin may not be installed in China. If it is abroad, you can delete it",
    "bin-wrapper": "npm:bin-wrapper-china",
    rollup: "^2.56.3"
  },
  repository: {
    type: "git",
    url: "git+https://github.com/jeecgboot/jeecgboot-vue3.git"
  },
  license: "MIT",
  bugs: {
    url: "https://github.com/jeecgboot/jeecgboot-vue3/issues"
  },
  homepage: "https://github.com/jeecgboot/jeecgboot-vue3",
  engines: {
    node: "^12 || >=14"
  },
  vite: {
    optimizeDeps: {
      include: []
    }
  }
};

// build/getConfigFileName.ts
init_define_APP_INFO();
var getConfigFileName = (env) => {
  return `__PRODUCTION__${env.VITE_GLOB_APP_SHORT_NAME || "__APP"}__CONF__`.toUpperCase().replace(/\s/g, "");
};

// src/utils/env.ts
function getCommonStoragePrefix() {
  const { VITE_GLOB_APP_SHORT_NAME } = getAppEnvConfig();
  return `${VITE_GLOB_APP_SHORT_NAME}__${getEnv()}`.toUpperCase();
}
function getStorageShortName() {
  return `${getCommonStoragePrefix()}${`__${package_default.version}`}__`.toUpperCase();
}
function getAppEnvConfig() {
  const ENV_NAME = getConfigFileName(import.meta.env);
  const ENV = import.meta.env.DEV ? import.meta.env : window[ENV_NAME];
  const {
    VITE_GLOB_APP_TITLE,
    VITE_GLOB_API_URL,
    VITE_USE_MOCK,
    VITE_GLOB_APP_SHORT_NAME,
    VITE_GLOB_API_URL_PREFIX,
    VITE_GLOB_APP_OPEN_SSO,
    VITE_GLOB_APP_OPEN_QIANKUN,
    VITE_GLOB_APP_CAS_BASE_URL,
    VITE_GLOB_DOMAIN_URL,
    VITE_GLOB_ONLINE_VIEW_URL
  } = ENV;
  if (!/^[a-zA-Z\_]*$/.test(VITE_GLOB_APP_SHORT_NAME)) {
  }
  return {
    VITE_GLOB_APP_TITLE,
    VITE_GLOB_API_URL,
    VITE_USE_MOCK,
    VITE_GLOB_APP_SHORT_NAME,
    VITE_GLOB_API_URL_PREFIX,
    VITE_GLOB_APP_OPEN_SSO,
    VITE_GLOB_APP_OPEN_QIANKUN,
    VITE_GLOB_APP_CAS_BASE_URL,
    VITE_GLOB_DOMAIN_URL,
    VITE_GLOB_ONLINE_VIEW_URL
  };
}
function getEnv() {
  return import.meta.env.MODE;
}
function isDevMode() {
  return import.meta.env.DEV;
}
function isProdMode() {
  return import.meta.env.PROD;
}

// src/utils/cache/storageCache.ts
init_define_APP_INFO();

// src/settings/encryptionSetting.ts
init_define_APP_INFO();
var DEFAULT_CACHE_TIME = 60 * 60 * 24 * 7;
var cacheCipher = {
  key: "_11111000001111@",
  iv: "@11111000001111_"
};
var enableStorageEncryption = !isDevMode();

// src/utils/cipher.ts
init_define_APP_INFO();
var import_aes = __toESM(require_aes());
var import_enc_utf8 = __toESM(require_enc_utf8());
var import_pad_pkcs7 = __toESM(require_pad_pkcs7());
var import_mode_ecb = __toESM(require_mode_ecb());
var import_md5 = __toESM(require_md5());
var import_enc_utf82 = __toESM(require_enc_utf8());
var import_enc_base64 = __toESM(require_enc_base64());
var AesEncryption = class {
  constructor(opt = {}) {
    __publicField(this, "key");
    __publicField(this, "iv");
    const { key, iv } = opt;
    if (key) {
      this.key = (0, import_enc_utf8.parse)(key);
    }
    if (iv) {
      this.iv = (0, import_enc_utf8.parse)(iv);
    }
  }
  get getOptions() {
    return {
      mode: import_mode_ecb.default,
      padding: import_pad_pkcs7.default,
      iv: this.iv
    };
  }
  encryptByAES(cipherText) {
    return (0, import_aes.encrypt)(cipherText, this.key, this.getOptions).toString();
  }
  decryptByAES(cipherText) {
    return (0, import_aes.decrypt)(cipherText, this.key, this.getOptions).toString(import_enc_utf82.default);
  }
};

// src/utils/cache/storageCache.ts
var createStorage = ({
  prefixKey = "",
  storage = sessionStorage,
  key = cacheCipher.key,
  iv = cacheCipher.iv,
  timeout = null,
  hasEncrypt = true
} = {}) => {
  if (hasEncrypt && [key.length, iv.length].some((item) => item !== 16)) {
    throw new Error("When hasEncrypt is true, the key or iv must be 16 bits!");
  }
  const encryption = new AesEncryption({ key, iv });
  const WebStorage2 = class WebStorage {
    constructor() {
      __publicField(this, "storage");
      __publicField(this, "prefixKey");
      __publicField(this, "encryption");
      __publicField(this, "hasEncrypt");
      this.storage = storage;
      this.prefixKey = prefixKey;
      this.encryption = encryption;
      this.hasEncrypt = hasEncrypt;
    }
    getKey(key2) {
      return `${this.prefixKey}${key2}`.toUpperCase();
    }
    set(key2, value, expire = timeout) {
      const stringData = JSON.stringify({
        value,
        time: Date.now(),
        expire: !isNullOrUnDef(expire) ? new Date().getTime() + expire * 1e3 : null
      });
      const stringifyValue = this.hasEncrypt ? this.encryption.encryptByAES(stringData) : stringData;
      this.storage.setItem(this.getKey(key2), stringifyValue);
    }
    get(key2, def = null) {
      const val = this.storage.getItem(this.getKey(key2));
      if (!val)
        return def;
      try {
        const decVal = this.hasEncrypt ? this.encryption.decryptByAES(val) : val;
        const data = JSON.parse(decVal);
        const { value, expire } = data;
        if (isNullOrUnDef(expire) || expire >= new Date().getTime()) {
          return value;
        }
        this.remove(key2);
      } catch (e) {
        return def;
      }
    }
    remove(key2) {
      this.storage.removeItem(this.getKey(key2));
    }
    clear() {
      this.storage.clear();
    }
  };
  return new WebStorage2();
};

// src/utils/cache/index.ts
var createOptions = (storage, options = {}) => {
  return {
    hasEncrypt: enableStorageEncryption,
    storage,
    prefixKey: getStorageShortName(),
    ...options
  };
};
var WebStorage = createStorage(createOptions(sessionStorage));
var createStorage2 = (storage = sessionStorage, options = {}) => {
  return createStorage(createOptions(storage, options));
};
var createSessionStorage = (options = {}) => {
  return createStorage2(sessionStorage, { ...options, timeout: DEFAULT_CACHE_TIME });
};
var createLocalStorage = (options = {}) => {
  return createStorage2(localStorage, { ...options, timeout: DEFAULT_CACHE_TIME });
};
var cache_default = WebStorage;

// src/enums/cacheEnum.ts
init_define_APP_INFO();
var TOKEN_KEY = "TOKEN__";
var LOCALE_KEY = "LOCALE__";
var USER_INFO_KEY = "USER__INFO__";
var ROLES_KEY = "ROLES__KEY__";
var DB_DICT_DATA_KEY = "UI_CACHE_DB_DICT_DATA";
var PROJ_CFG_KEY = "PROJ__CFG__KEY__";
var LOCK_INFO_KEY = "LOCK__INFO__KEY__";
var APP_DARK_MODE_KEY_ = "__APP__DARK__MODE__";
var APP_LOCAL_CACHE_KEY = "COMMON__LOCAL__KEY__";
var APP_SESSION_CACHE_KEY = "COMMON__SESSION__KEY__";
var TENANT_ID = "TENANT_ID";
var LOGIN_INFO_KEY = "LOGIN__INFO__";

// src/hooks/web/useI18n.ts
init_define_APP_INFO();

// src/locales/setupI18n.ts
init_define_APP_INFO();
var import_vue_i18n = __toESM(require_vue_i18n_cjs());

// src/locales/helper.ts
init_define_APP_INFO();

// src/settings/localeSetting.ts
init_define_APP_INFO();
var LOCALE = {
  ZH_CN: "zh_CN",
  EN_US: "en"
};
var localeSetting = {
  showPicker: true,
  locale: LOCALE.ZH_CN,
  fallback: LOCALE.ZH_CN,
  availableLocales: [LOCALE.ZH_CN, LOCALE.EN_US]
};
var localeList = [
  {
    text: "\u7B80\u4F53\u4E2D\u6587",
    event: LOCALE.ZH_CN
  },
  {
    text: "English",
    event: LOCALE.EN_US
  }
];

// src/store/modules/locale.ts
init_define_APP_INFO();
var ls = createLocalStorage();
var lsLocaleSetting = ls.get(LOCALE_KEY) || localeSetting;
var useLocaleStore = defineStore({
  id: "app-locale",
  state: () => ({
    localInfo: lsLocaleSetting,
    pathTitleMap: {}
  }),
  getters: {
    getShowPicker() {
      return !!this.localInfo?.showPicker;
    },
    getLocale() {
      return this.localInfo?.locale ?? "zh_CN";
    },
    getPathTitle: (state) => {
      return (path) => state.pathTitleMap[path];
    }
  },
  actions: {
    setLocaleInfo(info) {
      this.localInfo = { ...this.localInfo, ...info };
      ls.set(LOCALE_KEY, this.localInfo);
    },
    initLocale() {
      this.setLocaleInfo({
        ...localeSetting,
        ...this.localInfo
      });
    },
    setPathTitle(path, title) {
      this.pathTitleMap[path] = title;
    }
  }
});

// src/locales/setupI18n.ts
var { fallback, availableLocales } = localeSetting;
var i18n;

// src/hooks/web/useI18n.ts
function getKey(namespace, key) {
  if (!namespace) {
    return key;
  }
  if (key.startsWith(namespace)) {
    return key;
  }
  return `${namespace}.${key}`;
}
function useI18n(namespace) {
  const normalFn = {
    t: (key) => {
      return getKey(namespace, key);
    }
  };
  if (!i18n) {
    return normalFn;
  }
  const { t: t2, ...methods } = i18n.global;
  const tFn = (key, ...arg) => {
    if (!key)
      return "";
    if (!key.includes(".") && !namespace)
      return key;
    return t2(getKey(namespace, key), ...arg);
  };
  return {
    ...methods,
    t: tFn
  };
}
var t = (key) => key;

export {
  store,
  TOKEN_KEY,
  USER_INFO_KEY,
  ROLES_KEY,
  DB_DICT_DATA_KEY,
  PROJ_CFG_KEY,
  LOCK_INFO_KEY,
  APP_DARK_MODE_KEY_,
  APP_LOCAL_CACHE_KEY,
  APP_SESSION_CACHE_KEY,
  TENANT_ID,
  LOGIN_INFO_KEY,
  getAppEnvConfig,
  isProdMode,
  DEFAULT_CACHE_TIME,
  createSessionStorage,
  createLocalStorage,
  cache_exports,
  useI18n,
  t
};
//# sourceMappingURL=chunk-YLDRSUWQ.js.map
