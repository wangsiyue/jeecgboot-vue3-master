import {
  cloneDeep
} from "./chunk-4O4AOII7.js";
import {
  authButtonColumns,
  authButtonFixedList
} from "./chunk-OCFTGKVL.js";
import {
  authButtonDisable,
  authButtonEnable,
  authButtonLoadData
} from "./chunk-MAZ6MTU5.js";
import {
  default as default2,
  useTable
} from "./chunk-SEYUDYTJ.js";
import {
  _export_sfc
} from "./chunk-GZ7LOGNL.js";
import {
  createElementBlock,
  createTextVNode,
  createVNode,
  defineComponent,
  openBlock,
  ref,
  resolveComponent,
  watch,
  withCtx
} from "./chunk-JQQZ4WSS.js";
import {
  init_define_APP_INFO
} from "./chunk-ET6QIZHT.js";

// node_modules/@jeecg/online/AuthButtonConfig.js
init_define_APP_INFO();
import "D:/jeecgboot-vue3-master/src/components/jeecg/OnLine/JPopupOnlReport.vue";
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var _sfc_main = defineComponent({
  name: "AuthButtonConfig",
  components: { BasicTable: default2 },
  props: {
    headId: {
      type: String,
      default: "",
      required: true
    }
  },
  setup(props) {
    const cgformId = ref("");
    const pageType = ref(2);
    const pageControlList = ref(3);
    const pageControlForm = ref(5);
    const [registerTable, { reload }] = useTable({
      api: loadData,
      rowKey: "code",
      bordered: true,
      columns: authButtonColumns,
      showIndexColumn: false
    });
    watch(() => props.headId, (headId) => {
      cgformId.value = headId.split("?")[0];
      reload().catch(() => null);
    }, { immediate: true });
    function loadData(params) {
      return __async(this, null, function* () {
        let result = yield authButtonLoadData(cgformId.value, params);
        let { authList, buttonList } = result;
        let dataSource = [];
        for (let btn of cloneDeep(authButtonFixedList)) {
          let item = {
            status: 0,
            page: pageControlList.value
          };
          let auth = authList.find((auth2) => auth2.code == btn.code);
          Object.assign(btn, item, auth);
          dataSource.push(btn);
        }
        return concatCustomButton(authList, buttonList, dataSource);
      });
    }
    function concatCustomButton(authList, buttonList, dataSource) {
      for (let btn of buttonList) {
        let auth = authList.find((auth2) => auth2.code == btn.buttonCode);
        let item = {
          code: btn.buttonCode,
          title: btn.buttonName,
          status: 0,
          page: btn.buttonStyle == "form" ? pageControlForm.value : pageControlList.value
        };
        dataSource.push(Object.assign(item, auth));
      }
      return dataSource;
    }
    function onUpdateStatus(flag, record) {
      return __async(this, null, function* () {
        flag ? doEnableAuthButton(record) : doDisableAuthButton(record);
      });
    }
    function doEnableAuthButton(record) {
      return __async(this, null, function* () {
        let result = yield authButtonEnable({
          id: record.id,
          code: record.code,
          page: record.page,
          cgformId: cgformId.value,
          type: pageType.value,
          control: 5,
          status: 1
        });
        record.id = result.id;
        record.status = 1;
      });
    }
    function doDisableAuthButton(record) {
      return __async(this, null, function* () {
        yield authButtonDisable(record.id);
        record.status = 0;
      });
    }
    return { registerTable, onUpdateStatus };
  }
});
var _hoisted_1 = { class: "auth-field-config" };
var _hoisted_2 = createTextVNode(" \u53EF\u89C1 ");
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_a_switch = resolveComponent("a-switch");
  const _component_BasicTable = resolveComponent("BasicTable");
  return openBlock(), createElementBlock("div", _hoisted_1, [
    createVNode(_component_BasicTable, { onRegister: _ctx.registerTable }, {
      switch: withCtx(({ text, record }) => [
        createVNode(_component_a_switch, {
          size: "small",
          checked: record.status === 1,
          onChange: (flag) => _ctx.onUpdateStatus(flag, record)
        }, null, 8, ["checked", "onChange"])
      ]),
      control: withCtx(() => [
        _hoisted_2
      ]),
      _: 1
    }, 8, ["onRegister"])
  ]);
}
var AuthButtonConfig = _export_sfc(_sfc_main, [["render", _sfc_render]]);

export {
  AuthButtonConfig
};
//# sourceMappingURL=chunk-OUASFHT6.js.map
