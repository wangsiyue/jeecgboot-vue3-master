import {
  OnlineForm
} from "./chunk-K2ZZAGT7.js";
import "./chunk-UYMMAUNI.js";
import {
  getRefPromise
} from "./chunk-TVTOMBKU.js";
import "./chunk-HOLFWHAD.js";
import "./chunk-2UC6MOE4.js";
import "./chunk-CWQVWJAJ.js";
import "./chunk-YFX4JODE.js";
import "./chunk-BDO74DPO.js";
import "./chunk-OMA7JPDB.js";
import "./chunk-DZMOYDKI.js";
import "./chunk-TNMIRAD5.js";
import "./chunk-EKOIBGOQ.js";
import {
  defHttp
} from "./chunk-MXTOG34P.js";
import "./chunk-SAFWZAHM.js";
import "./chunk-LZQJUVGN.js";
import "./chunk-GH3CBHGS.js";
import "./chunk-ARD7XY2B.js";
import "./chunk-H5XI7H7T.js";
import "./chunk-GPOHKMTD.js";
import "./chunk-RLJKXQIA.js";
import "./chunk-RHCHCTS4.js";
import {
  _export_sfc
} from "./chunk-GZ7LOGNL.js";
import "./chunk-SQAXQJKY.js";
import "./chunk-GE6AQLDJ.js";
import "./chunk-RX5I5ULI.js";
import "./chunk-KVJ6VO5A.js";
import "./chunk-WLZB43K5.js";
import "./chunk-GJK6IZYL.js";
import "./chunk-YTTBVVBT.js";
import "./chunk-KIDT26GW.js";
import "./chunk-EW6PF333.js";
import "./chunk-SFFFXB4Y.js";
import "./chunk-4VBCR2UY.js";
import "./chunk-LU447FN7.js";
import "./chunk-PCZNDPKY.js";
import "./chunk-RNTI5KWT.js";
import "./chunk-D2VLAI67.js";
import "./chunk-6AC3D6AH.js";
import "./chunk-ZQYRAJKZ.js";
import "./chunk-Z3NVNWVB.js";
import "./chunk-YXPBMO4E.js";
import "./chunk-WTYZJWFF.js";
import "./chunk-IF4EKY7K.js";
import "./chunk-SOWJBRMK.js";
import "./chunk-JTWWQTIY.js";
import "./chunk-7GOB2L72.js";
import "./chunk-GUMRFUUS.js";
import "./chunk-D65CINXV.js";
import "./chunk-3UC42JCT.js";
import "./chunk-RL4BZ2NY.js";
import "./chunk-MH4EPDFD.js";
import "./chunk-L26JVTZY.js";
import "./chunk-KAI4QMTN.js";
import "./chunk-O3J5FWNC.js";
import "./chunk-SJ2YS27J.js";
import "./chunk-UFII5LNT.js";
import "./chunk-FYK3HJMB.js";
import {
  createCommentVNode,
  createElementBlock,
  createTextVNode,
  createVNode,
  defineComponent,
  nextTick,
  openBlock,
  ref,
  resolveComponent,
  watch,
  withCtx
} from "./chunk-JQQZ4WSS.js";
import "./chunk-G5TZ7427.js";
import "./chunk-EDBTC3WO.js";
import {
  init_define_APP_INFO
} from "./chunk-ET6QIZHT.js";

// node_modules/@jeecg/online/ProcessOnlineForm.js
init_define_APP_INFO();
import "D:/jeecgboot-vue3-master/src/components/jeecg/OnLine/JPopupOnlReport.vue";
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var _sfc_main = defineComponent({
  name: "ProcessOnlineForm",
  inheritAttrs: false,
  components: {
    OnlineForm
  },
  props: {
    dataId: {
      type: String,
      default: ""
    },
    tableName: {
      type: String,
      default: ""
    },
    taskId: {
      type: String,
      default: ""
    },
    disabled: {
      type: Boolean,
      default: false
    }
  },
  setup(props) {
    const onlineFormCompRef = ref();
    const formId = ref("");
    const formTemplate = ref(1);
    const isTreeForm = ref(false);
    const pidFieldName = ref("");
    const spinLoading = ref(false);
    watch(() => props.tableName, (val) => {
      if (!val) {
        return;
      }
      loadFormItems();
    }, { immediate: true });
    function loadFormItems() {
      return __async(this, null, function* () {
        spinLoading.value = true;
        const url = `/online/cgform/api/getFormItemBytbname/${props.tableName}`;
        const params = { taskId: props.taskId };
        try {
          let result = yield defHttp.get({ url, params });
          console.log("\u52A8\u6001\u8868\u5355\u67E5\u8BE2\u7ED3\u679C\u662F\uFF1A", result);
          formId.value = result.head.id;
          formTemplate.value = Number(result.head.formTemplate || 1);
          isTreeForm.value = result.head.isTree === "Y";
          pidFieldName.value = result.head.treeParentIdField || "";
          yield nextTick(() => __async(this, null, function* () {
            let myForm = yield getRefPromise(onlineFormCompRef);
            myForm.createRootProperties(result);
          }));
        } catch (e) {
          console.error("\u6D41\u7A0B\u8868\u5355\u67E5\u8BE2\u5F02\u5E38", e);
        }
      });
    }
    function renderSuccess() {
      return __async(this, null, function* () {
        let myForm = yield getRefPromise(onlineFormCompRef);
        spinLoading.value = false;
        myForm.show(true, {
          id: props.dataId
        });
      });
    }
    const buttonLoading = ref(false);
    function handleSubmit() {
      return __async(this, null, function* () {
        buttonLoading.value = true;
        onlineFormCompRef.value.handleSubmit();
      });
    }
    function handleSuccess() {
      buttonLoading.value = false;
    }
    return {
      onlineFormCompRef,
      formId,
      formTemplate,
      isTreeForm,
      pidFieldName,
      renderSuccess,
      handleSuccess,
      handleSubmit,
      buttonLoading,
      spinLoading
    };
  }
});
var _hoisted_1 = { class: "cust-onl-form" };
var _hoisted_2 = {
  key: 0,
  style: { "width": "100%", "text-align": "center", "margin-top": "5px" }
};
var _hoisted_3 = createTextVNode(" \u63D0 \u4EA4 ");
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_a_button = resolveComponent("a-button");
  const _component_online_form = resolveComponent("online-form");
  const _component_a_spin = resolveComponent("a-spin");
  return openBlock(), createElementBlock("div", _hoisted_1, [
    createVNode(_component_a_spin, { spinning: _ctx.spinLoading }, {
      default: withCtx(() => [
        createVNode(_component_online_form, {
          ref: "onlineFormCompRef",
          id: _ctx.formId,
          disabled: _ctx.disabled,
          "form-template": _ctx.formTemplate,
          isTree: _ctx.isTreeForm,
          pidField: _ctx.pidFieldName,
          onRendered: _ctx.renderSuccess,
          onSuccess: _ctx.handleSuccess
        }, {
          bottom: withCtx(() => [
            !_ctx.disabled && !_ctx.spinLoading ? (openBlock(), createElementBlock("div", _hoisted_2, [
              createVNode(_component_a_button, {
                preIcon: "ant-design:check",
                style: { "width": "126px" },
                type: "primary",
                onClick: _ctx.handleSubmit,
                loading: _ctx.buttonLoading
              }, {
                default: withCtx(() => [
                  _hoisted_3
                ]),
                _: 1
              }, 8, ["onClick", "loading"])
            ])) : createCommentVNode("", true)
          ]),
          _: 1
        }, 8, ["id", "disabled", "form-template", "isTree", "pidField", "onRendered", "onSuccess"])
      ]),
      _: 1
    }, 8, ["spinning"])
  ]);
}
var ProcessOnlineForm = _export_sfc(_sfc_main, [["render", _sfc_render], ["__scopeId", "data-v-9b256bc4"]]);
export {
  ProcessOnlineForm as default
};
//# sourceMappingURL=ProcessOnlineForm-PIMLNI34.js.map
